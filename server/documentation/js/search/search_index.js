var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddEventDto.html",[0,0.135,1,2.18]],["body/classes/AddEventDto.html",[0,0.226,1,3.665,2,1.456,3,0.328,4,0.29,5,0.29,6,4.135,7,0.493,8,1.668,9,2.147,10,3.14,11,0.68,12,0.022,13,1.234,14,1.219,15,3.657,16,0.631,17,4.86,18,0.328,19,3.13,20,2.778,21,1.741,22,0.328,23,3.3,24,0.019,25,0.019]],["title/controllers/AppController.html",[26,1.423,27,2.386]],["body/controllers/AppController.html",[0,0.181,3,0.319,4,0.282,5,0.282,7,0.479,9,1.593,12,0.023,13,1.213,14,1.184,16,0.613,18,0.392,22,0.319,24,0.019,25,0.019,26,2.351,27,3.942,28,1.912,29,4.017,30,1.958,31,5.578,32,4.722,33,1.593,34,0.986,35,3.593,36,4.017,37,2.93,38,1.501,39,4.722]],["title/modules/AppModule.html",[40,1.258,41,2.386]],["body/modules/AppModule.html",[0,0.139,3,0.244,4,0.216,5,0.216,12,0.023,18,0.454,22,0.244,24,0.016,25,0.016,27,3.758,28,1.979,34,0.755,35,3.647,36,3.077,40,1.982,41,4.79,42,1.666,43,1.784,44,2.067,45,2.067,46,1.784,47,2.932,48,1.916,49,3.077,50,3.077,51,3.077,52,3.958,53,3.539,54,3.958,55,3.958,56,3.958,57,2.793,58,2.067,59,2.067,60,3.616,61,3.032,62,3.616,63,3.616,64,3.616,65,3.616,66,3.077,67,3.077,68,2.456,69,3.616,70,3.616,71,3.616,72,3.616,73,1.916]],["title/injectables/AppService.html",[35,2.008,74,0.781]],["body/injectables/AppService.html",[0,0.188,3,0.332,4,0.293,5,0.293,7,0.499,12,0.023,13,1.242,16,0.638,18,0.332,22,0.332,24,0.019,25,0.019,30,2.006,31,5.654,33,1.657,34,1.027,35,3.4,38,1.562,74,1.321,75,1.99,76,4.181,77,4.914,78,4.914,79,4.914]],["title/controllers/AuthController.html",[26,1.423,80,2.18]],["body/controllers/AuthController.html",[0,0.094,3,0.165,4,0.146,5,0.317,7,0.248,11,0.516,12,0.023,14,1.242,16,0.643,18,0.378,22,0.165,24,0.012,25,0.012,26,0.99,28,0.99,30,1.245,33,1.958,34,0.511,37,1.517,38,1.981,80,2.29,81,2.08,82,1.66,83,1.84,84,4.215,85,3.691,86,4.208,87,4.215,88,2.08,89,3.795,90,3.691,91,2.445,92,4.757,93,5.592,94,1.886,95,1.242,96,1.886,97,3.02,98,5.085,99,4.215,100,4.215,101,4.215,102,4.215,103,3.234,104,4.757,105,3.469,106,4.215,107,4.215,108,2.445,109,3.691,110,2.445,111,2.356,112,2.445,113,3.797,114,2.445,115,2.445,116,3.797,117,3.691,118,1.106,119,3.691,120,1.701,121,3.14,122,3.14,123,1.821,124,2.08,125,3.795,126,3.691,127,2.445,128,1.701,129,1.66,130,3.691,131,1.66,132,1.206,133,2.542,134,2.08,135,2.08,136,2.08,137,1.295,138,2.445,139,2.507,140,1.66,141,2.445,142,2.445,143,4.215,144,2.445,145,2.445,146,2.445,147,2.445,148,2.445,149,1.66,150,2.445,151,2.445,152,2.445,153,2.445,154,2.445,155,2.445]],["title/modules/AuthModule.html",[40,1.258,52,2.18]],["body/modules/AuthModule.html",[0,0.136,3,0.24,4,0.212,5,0.212,12,0.023,18,0.462,22,0.24,24,0.015,25,0.015,28,1.957,34,0.743,38,1.131,40,1.966,42,1.64,43,1.755,44,2.034,45,2.034,46,1.755,47,2.908,48,1.885,52,4.203,53,2.034,57,2.763,58,2.034,59,2.034,61,2.208,66,3.027,67,3.027,68,2.416,80,3.405,118,1.066,120,2.926,133,3.63,134,3.027,156,3.027,157,3.027,158,3.939,159,3.558,160,3.558,161,2.677,162,2.208,163,1.066,164,3.558,165,2.034,166,3.558,167,2.561,168,2.208,169,3.558,170,3.558,171,3.558,172,2.416,173,3.558,174,3.027,175,3.558,176,2.677,177,3.558,178,3.027,179,3.558,180,2.677,181,1.885]],["title/injectables/AuthService.html",[74,0.781,133,2.008]],["body/injectables/AuthService.html",[0,0.06,3,0.106,4,0.093,5,0.255,7,0.159,11,0.598,12,0.023,13,0.962,16,0.555,18,0.369,22,0.106,24,0.008,25,0.008,30,0.874,33,1.645,34,0.542,38,1.733,74,0.576,75,0.634,80,2.858,83,1.178,84,3.919,86,4.209,87,3.281,88,2.206,89,3.283,92,3.919,94,1.627,95,1.072,96,1.627,97,2.253,98,4.34,99,3.281,100,3.281,101,3.281,102,3.281,103,2.92,104,3.919,105,3.383,106,3.919,107,4.501,111,2.044,113,2.902,118,1.923,121,2.206,122,4.34,123,2.61,124,2.206,125,3.283,128,1.529,132,0.772,133,1.482,135,1.332,136,1.332,143,3.281,161,1.178,163,0.469,168,0.971,178,2.206,182,1.178,183,2.634,184,2.592,185,1.374,186,0.895,187,2.205,188,4.877,189,1.566,190,1.482,191,2.592,192,1.566,193,2.592,194,1.566,195,3.919,196,2.902,197,2.592,198,4.274,199,1.566,200,2.592,201,2.592,202,1.566,203,2.592,204,1.063,205,0.971,206,0.895,207,0.634,208,3.312,209,1.566,210,1.332,211,1.566,212,1.332,213,1.332,214,2.513,215,1.178,216,1.332,217,2.206,218,0.895,219,1.374,220,2.902,221,3.283,222,2.393,223,1.608,224,1.76,225,1.76,226,2.496,227,2.592,228,2.584,229,1.566,230,1.332,231,0.971,232,2.592,233,2.592,234,1.76,235,5.175,236,2.902,237,2.902,238,2.206,239,1.063,240,1.063,241,1.063,242,2.393,243,1.178,244,1.063,245,1.178,246,1.566,247,1.566,248,1.566,249,2.592,250,2.592,251,2.592,252,1.566,253,1.566,254,4.274,255,3.636,256,3.857,257,2.592,258,2.592,259,2.592,260,1.566,261,1.566,262,1.566,263,1.566,264,1.566,265,1.566,266,1.566,267,1.566,268,1.566,269,1.566,270,1.566,271,1.566,272,1.566,273,1.566]],["title/modules/DatabaseModule.html",[40,1.258,53,2.008]],["body/modules/DatabaseModule.html",[0,0.158,3,0.279,4,0.247,5,0.247,11,0.578,12,0.023,13,1.235,16,0.537,18,0.422,22,0.279,24,0.017,25,0.017,30,1.394,33,1.394,34,0.864,38,1.314,40,2.117,42,1.905,47,2.19,48,2.19,53,3.379,61,2.565,68,2.807,94,1.573,95,1.036,96,1.573,162,2.565,163,1.238,174,3.517,274,4.134,275,5.338,276,4.134,277,5.338,278,4.134,279,5.912,280,4.134,281,5.912,282,6.248,283,4.014,284,4.134,285,4.134,286,4.134,287,3.111,288,4.134,289,4.134]],["title/injectables/DatabaseService.html",[74,0.781,283,2.386]],["body/injectables/DatabaseService.html",[0,0.171,3,0.301,4,0.266,5,0.266,7,0.452,9,1.502,11,0.623,12,0.023,16,0.726,18,0.414,22,0.301,24,0.018,25,0.018,30,1.887,33,1.502,34,0.93,38,1.415,74,1.243,75,1.803,94,1.695,95,1.116,96,1.695,163,1.334,185,2.359,207,1.803,219,2.359,283,3.8,290,3.788,291,6.421,292,4.453,293,6.932,294,4.453,295,4.453,296,4.453,297,4.453,298,4.453]],["title/classes/DeleteEventDto.html",[0,0.135,299,2.18]],["body/classes/DeleteEventDto.html",[0,0.226,2,1.456,3,0.328,4,0.29,5,0.29,7,0.493,8,1.668,9,2.147,10,3.14,11,0.68,12,0.022,13,1.234,14,1.219,15,3.657,16,0.631,18,0.328,19,3.13,20,2.778,21,1.741,22,0.328,23,3.3,24,0.019,25,0.019,299,3.665,300,4.135,301,4.86]],["title/controllers/EventController.html",[26,1.423,302,2.386]],["body/controllers/EventController.html",[0,0.069,1,3.338,3,0.121,4,0.107,5,0.274,7,0.182,10,0.885,11,0.723,12,0.023,14,1.463,16,0.757,18,0.402,22,0.121,24,0.009,25,0.009,26,0.727,28,0.727,30,0.977,33,1.968,34,0.605,37,1.113,38,1.854,82,1.218,94,2.172,95,1.431,96,2.172,103,3.203,111,2.603,116,4.215,123,1.798,129,1.218,131,1.218,132,0.885,137,0.951,139,1.218,149,3.962,183,3.164,214,0.774,228,0.951,231,1.113,242,1.113,299,3.338,302,1.968,303,1.526,304,1.35,305,2.465,306,2.898,307,2.898,308,2.465,309,2.465,310,2.465,311,3.561,312,2.898,313,2.898,314,2.465,315,2.898,316,1.794,317,1.794,318,1.794,319,1.794,320,3.048,321,1.794,322,1.794,323,1.794,324,3.338,325,1.794,326,1.794,327,2.608,328,1.794,329,1.526,330,1.794,331,1.794,332,1.794,333,1.794,334,1.794,335,3.207,336,1.794,337,1.794,338,1.794,339,1.794,340,1.794,341,3.338,342,1.794,343,1.794,344,1.794,345,1.526,346,1.794,347,1.794,348,1.35,349,1.794,350,1.794,351,3.101,352,1.794,353,1.794,354,1.35,355,1.526,356,1.35,357,1.526,358,1.794,359,2.898,360,1.794,361,2.898,362,1.526,363,1.526,364,1.526,365,1.526,366,1.526,367,1.526,368,1.526,369,2.084,370,1.526,371,1.35,372,1.526,373,1.794,374,1.526,375,1.526,376,1.794,377,1.794,378,1.794,379,1.794,380,1.794,381,1.794,382,1.794,383,1.794,384,1.526,385,1.794,386,1.794,387,1.526,388,1.794,389,1.794,390,1.794,391,1.794,392,1.794,393,1.794,394,1.794,395,1.794,396,1.794,397,1.794,398,1.794,399,1.794,400,1.794,401,1.794,402,1.794,403,1.794,404,1.794,405,1.794,406,1.794,407,1.794,408,1.794,409,1.794,410,1.794,411,1.794,412,1.794,413,1.794,414,1.794,415,1.794,416,1.794,417,1.794,418,1.794,419,1.794,420,1.794,421,1.526,422,1.526]],["title/modules/EventModule.html",[40,1.258,54,2.18]],["body/modules/EventModule.html",[0,0.155,3,0.273,4,0.241,5,0.241,10,1.99,12,0.023,18,0.453,22,0.273,24,0.017,25,0.017,28,2.128,34,0.843,40,2.092,42,1.859,43,1.99,44,2.306,45,2.306,46,1.99,47,3.096,48,2.137,54,4.216,57,3.003,58,2.306,59,2.306,61,2.503,95,1.011,118,1.208,120,3.032,162,2.503,163,1.208,167,2.783,180,3.035,181,2.783,302,3.967,369,3.761,370,3.432,371,3.035,423,3.432,424,3.432,425,4.034,426,4.034,427,2.306,428,3.035,429,3.567,430,4.034]],["title/injectables/EventService.html",[74,0.781,369,2.008]],["body/injectables/EventService.html",[0,0.049,1,2.098,3,0.086,4,0.076,5,0.202,7,0.129,10,1.668,11,0.728,12,0.023,13,1.352,16,0.694,18,0.369,22,0.086,24,0.007,25,0.007,30,0.735,33,1.756,34,0.597,38,1.655,73,2.473,74,0.484,75,0.516,94,1.982,95,1.37,96,1.982,103,3.037,105,3.231,118,1.24,123,3.061,128,1.004,132,0.629,163,0.382,183,3.021,185,1.155,186,0.728,187,2.53,190,1.246,204,0.865,205,0.791,206,0.728,207,0.516,214,2.583,218,0.728,219,1.155,228,3.053,231,1.772,239,1.48,240,1.48,241,1.48,242,3.392,243,0.959,244,1.48,245,0.959,287,2.149,299,2.098,304,4.113,305,3.233,308,2.43,309,1.854,310,1.854,311,2.876,314,1.854,320,2.57,324,2.746,327,2.18,335,2.57,341,2.746,351,2.43,362,1.084,364,1.084,365,1.084,366,1.084,367,1.084,368,1.084,369,1.246,371,0.959,372,1.084,421,1.084,422,1.084,427,0.728,431,1.084,432,2.18,433,2.18,434,2.18,435,2.18,436,2.18,437,2.18,438,2.856,439,1.274,440,2.18,441,1.274,442,3.536,443,2.18,444,1.274,445,4.743,446,2.18,447,1.274,448,2.18,449,1.274,450,2.18,451,1.274,452,2.18,453,1.274,454,2.18,455,1.274,456,1.274,457,2.18,458,1.274,459,2.18,460,1.274,461,2.18,462,1.274,463,1.274,464,1.084,465,0.959,466,1.274,467,3.801,468,3.233,469,1.274,470,1.274,471,1.854,472,2.856,473,3.233,474,1.274,475,1.274,476,2.18,477,2.43,478,1.274,479,3.8,480,2.876,481,2.856,482,2.18,483,1.48,484,1.48,485,1.274,486,1.854,487,1.084,488,1.854,489,1.274,490,1.274,491,1.274,492,2.18,493,2.18,494,1.274,495,2.18,496,1.274,497,2.856,498,1.274,499,2.18,500,1.48,501,2.18,502,1.64,503,2.18,504,2.18,505,1.854,506,2.856,507,2.43,508,2.43,509,1.084,510,1.274,511,1.084,512,2.18,513,1.274,514,1.274,515,1.274,516,1.274,517,1.274,518,1.854,519,2.18,520,1.274,521,1.274,522,2.18,523,2.18,524,2.18,525,1.64,526,1.274,527,1.274,528,1.274,529,1.274]],["title/classes/Events.html",[0,0.135,10,1.733]],["body/classes/Events.html",[0,0.143,2,1.117,3,0.252,4,0.222,5,0.222,7,0.378,8,1.408,10,2.46,11,0.919,12,0.023,13,1.44,14,1.568,16,0.812,18,0.337,22,0.337,24,0.016,25,0.016,73,1.975,95,1.409,163,1.117,181,1.975,207,1.51,214,1.609,327,2.152,429,2.531,442,2.531,483,3.816,484,3.816,500,2.531,502,2.805,507,4.781,525,4.229,530,2.805,531,2.642,532,4.229,533,5.09,534,3.728,535,3.728,536,3.753,537,2.805,538,3.728,539,3.387,540,3.728,541,3.728,542,2.805,543,2.805,544,2.313,545,2.805,546,3.728,547,2.805,548,3.172]],["title/controllers/GroupController.html",[26,1.423,549,2.386]],["body/controllers/GroupController.html",[0,0.09,3,0.159,4,0.14,5,0.14,7,0.239,11,0.502,12,0.023,14,1.481,16,0.767,18,0.372,22,0.159,24,0.011,25,0.011,26,0.953,28,0.953,30,1.21,33,1.992,34,0.492,37,1.46,38,1.877,82,1.598,94,2.248,95,1.481,96,2.248,103,3.266,111,2.302,116,4.583,129,1.598,131,1.598,132,1.161,137,1.247,139,1.598,149,4.011,183,3.179,327,2.78,329,2.002,345,2.002,348,1.771,355,2.002,356,1.771,384,2.002,387,2.002,442,3.3,549,2.435,550,2.002,551,2.002,552,3.051,553,3.051,554,3.051,555,3.051,556,3.051,557,3.586,558,3.051,559,3.051,560,2.354,561,2.354,562,2.354,563,2.354,564,3.665,565,2.354,566,2.354,567,2.354,568,2.354,569,2.354,570,2.354,571,2.354,572,2.354,573,3.665,574,2.354,575,2.354,576,2.354,577,2.354,578,2.002,579,2.354,580,2.354,581,2.354,582,2.354,583,1.771,584,2.002,585,2.002,586,2.484,587,2.002,588,1.247,589,1.771,590,2.354,591,2.354,592,2.354,593,2.354,594,2.354,595,2.354,596,2.354,597,2.354,598,2.354,599,2.354,600,2.354,601,2.354,602,2.354,603,2.354,604,2.354,605,2.354,606,2.354,607,2.354,608,2.354,609,2.354,610,2.354,611,2.354,612,2.354]],["title/modules/GroupModule.html",[40,1.258,55,2.18]],["body/modules/GroupModule.html",[0,0.155,3,0.273,4,0.241,5,0.241,12,0.023,18,0.453,22,0.273,24,0.017,25,0.017,28,2.132,34,0.845,40,2.095,42,1.864,43,1.996,44,2.313,45,2.313,46,1.996,47,3.1,48,2.144,55,4.218,57,3.009,58,2.313,59,2.313,61,2.51,118,1.212,120,3.035,162,2.51,163,1.212,167,2.789,180,3.961,181,2.789,427,2.313,428,3.044,549,3.973,586,3.765,587,3.442,588,2.144,589,3.044,613,3.442,614,3.442,615,4.046,616,4.046,617,3.575]],["title/injectables/GroupService.html",[74,0.781,586,2.008]],["body/injectables/GroupService.html",[0,0.059,3,0.104,4,0.092,5,0.092,7,0.156,11,0.734,12,0.023,13,1.293,16,0.682,18,0.342,22,0.104,24,0.008,25,0.008,30,0.86,33,1.707,34,0.533,38,1.805,73,1.351,74,0.567,75,0.622,94,1.999,95,1.393,96,1.999,103,2.986,105,3.525,118,2.01,123,2.741,128,2.668,132,0.757,163,0.46,183,2.984,185,1.351,186,0.877,187,2.763,190,1.458,204,1.042,206,0.877,207,0.622,214,2.612,218,0.877,219,1.351,228,3.068,231,0.952,239,1.042,240,1.042,241,1.042,242,2.83,243,1.155,244,1.042,245,1.155,255,2.783,327,0.662,442,2.587,465,1.155,467,3.637,473,3.597,477,2.17,486,4.305,487,1.306,488,1.306,509,2.783,511,1.306,518,2.17,551,5.083,552,2.17,553,2.17,554,2.17,555,2.17,556,2.17,558,2.17,559,2.17,564,3.139,573,3.139,578,2.17,584,1.306,585,1.306,586,1.458,588,2.24,589,1.155,618,1.306,619,2.55,620,3.271,621,1.535,622,2.55,623,5.888,624,1.535,625,2.55,626,1.535,627,2.55,628,1.535,629,2.55,630,1.535,631,2.55,632,3.81,633,1.535,634,2.55,635,1.535,636,1.535,637,2.55,638,1.535,639,1.306,640,1.535,641,1.535,642,1.535,643,3.271,644,3.241,645,1.535,646,1.535,647,1.306,648,3.81,649,3.432,650,1.535,651,2.17,652,2.867,653,1.535,654,3.271,655,3.271,656,2.55,657,1.306,658,2.55,659,2.17,660,4.228,661,1.535,662,2.55,663,1.535,664,2.55,665,1.535,666,1.306,667,3.271,668,1.535,669,1.535,670,2.55,671,1.535,672,1.535,673,1.535,674,1.535,675,1.535,676,1.535,677,1.535,678,1.535,679,2.55,680,1.306,681,1.535,682,1.306,683,1.535]],["title/classes/Groups.html",[0,0.135,588,1.861]],["body/classes/Groups.html",[0,0.151,2,1.179,3,0.266,4,0.235,5,0.235,7,0.4,8,1.46,11,0.891,12,0.023,13,1.412,14,1.537,16,0.796,18,0.349,22,0.349,24,0.017,25,0.017,73,2.086,95,1.537,128,1.815,163,1.179,181,2.086,207,1.595,214,1.699,531,2.74,532,4.345,533,5.013,536,3.892,537,2.963,539,2.674,542,2.963,543,2.963,544,2.443,545,2.963,547,2.963,588,2.74,617,2.674,647,4.913,649,2.963,652,2.963,666,4.913,680,3.35,682,4.913,684,2.963,685,3.938,686,3.938,687,3.938,688,3.938,689,3.35]],["title/injectables/JwtGuard.html",[74,0.781,137,1.861]],["body/injectables/JwtGuard.html",[0,0.196,3,0.346,4,0.306,5,0.306,12,0.023,18,0.412,22,0.346,24,0.019,25,0.019,34,1.07,74,1.355,75,2.075,137,3.231,165,2.928,531,2.714,583,3.855,690,3.855,691,4.358,692,5.123]],["title/injectables/JwtStrategy.html",[74,0.781,120,1.619]],["body/injectables/JwtStrategy.html",[0,0.144,3,0.255,4,0.225,5,0.225,7,0.383,11,0.703,12,0.023,16,0.652,18,0.436,22,0.255,24,0.016,25,0.016,30,1.695,33,1.272,34,0.788,38,1.198,74,1.116,75,1.527,94,1.913,95,1.26,96,1.913,118,1.693,120,2.315,163,1.129,165,2.155,168,2.339,172,3.412,176,2.837,183,2.604,185,2.662,186,2.155,187,3.446,190,2.872,205,2.339,206,2.155,207,1.527,214,2.168,218,2.155,219,1.998,228,1.998,327,1.627,354,2.837,531,1.998,544,2.339,693,3.208,694,4.275,695,3.77,696,4.275,697,3.77,698,4.275,699,3.208,700,3.208,701,3.208,702,2.837,703,3.208,704,3.208,705,3.208,706,3.77,707,3.208,708,3.208,709,3.208,710,3.208,711,2.837]],["title/classes/LoginDto.html",[0,0.135,89,2.18]],["body/classes/LoginDto.html",[0,0.213,2,1.316,3,0.297,4,0.262,5,0.262,7,0.446,8,1.567,9,2.27,11,0.776,12,0.023,13,1.335,14,1.391,16,0.72,18,0.297,21,1.574,22,0.297,24,0.018,25,0.018,89,3.443,128,2.557,221,4.089,222,3.774,712,3.738,713,3.738,714,3.769,715,4.176,716,4.176,717,4.394,718,2.512,719,4.394,720,2.625,721,2.395,722,2.941]],["title/controllers/ProfileController.html",[26,1.423,723,2.386]],["body/controllers/ProfileController.html",[0,0.104,3,0.183,4,0.161,5,0.161,7,0.274,11,0.556,12,0.023,14,1.455,16,0.753,18,0.405,22,0.183,24,0.013,25,0.013,26,1.095,28,1.095,30,1.342,33,1.957,34,0.831,37,1.677,38,1.844,82,1.836,94,2.209,95,1.455,96,2.209,103,3.234,111,2.501,116,4.4,118,0.81,129,2.702,131,1.836,132,1.334,137,1.432,139,1.836,149,3.941,183,3.157,327,1.717,348,2.034,356,2.034,357,2.3,363,2.3,639,2.3,723,2.702,724,2.3,725,4.016,726,3.979,727,3.979,728,3.385,729,3.385,730,3.979,731,2.703,732,2.703,733,2.703,734,2.703,735,2.703,736,2.703,737,2.703,738,3.82,739,2.703,740,2.703,741,2.703,742,2.703,743,2.703,744,2.703,745,2.703,746,2.703,747,4.43,748,3.23,749,2.703,750,2.703,751,2.3,752,2.3,753,2.699,754,2.3,755,2.703,756,2.703,757,2.703,758,2.703,759,2.703,760,2.703,761,2.703,762,2.703,763,2.703,764,2.703,765,2.703,766,2.703,767,2.703,768,2.703,769,2.703,770,2.703,771,2.703]],["title/modules/ProfileModule.html",[40,1.258,56,2.18]],["body/modules/ProfileModule.html",[0,0.159,3,0.28,4,0.247,5,0.247,12,0.023,18,0.448,22,0.28,24,0.017,25,0.017,28,2.166,34,0.866,40,2.12,42,1.911,43,2.046,44,2.371,45,2.371,46,2.046,47,3.137,48,2.197,56,4.24,57,3.058,58,2.371,59,2.371,95,1.04,118,1.242,120,3.055,162,2.573,163,1.242,167,2.834,181,2.197,427,2.371,428,3.121,723,4.02,753,3.79,754,3.528,772,3.528,773,3.528,774,4.147,775,4.147,776,4.147]],["title/injectables/ProfileService.html",[74,0.781,753,2.008]],["body/injectables/ProfileService.html",[0,0.089,3,0.157,4,0.139,5,0.139,7,0.236,11,0.798,12,0.023,13,1.26,16,0.741,18,0.398,22,0.157,24,0.011,25,0.011,30,1.2,33,1.851,34,0.743,38,1.744,73,1.234,74,0.79,75,0.943,94,2.173,95,1.431,96,2.173,103,3.132,105,3.405,118,2.029,123,2.568,132,1.149,163,0.698,183,3.087,185,1.885,186,1.331,187,2.762,190,2.034,196,1.752,204,1.581,205,1.445,206,1.331,207,1.441,214,1.535,218,1.331,219,1.234,228,2.287,231,1.445,234,1.581,239,1.581,240,1.581,241,1.581,242,2.678,244,1.581,327,1.863,427,1.331,464,1.981,465,1.752,467,3.917,471,3.027,480,1.981,711,2.677,725,3.027,728,3.027,729,3.027,738,3.653,747,4.669,748,2.998,751,1.981,752,1.981,753,2.034,777,1.981,778,3.558,779,3.558,780,2.329,781,3.558,782,2.329,783,3.558,784,2.329,785,2.329,786,3.558,787,2.329,788,3.558,789,2.329,790,3.558,791,2.329,792,3.558,793,2.329,794,2.329,795,2.329,796,3.558,797,2.329,798,3.558,799,2.329,800,2.329,801,2.329,802,3.558,803,2.329,804,2.329,805,2.329,806,3.027,807,2.329,808,2.329,809,2.329,810,2.329,811,2.329,812,2.329]],["title/injectables/RefreshGuard.html",[74,0.781,140,2.386]],["body/injectables/RefreshGuard.html",[0,0.196,3,0.346,4,0.306,5,0.306,12,0.023,18,0.412,22,0.346,24,0.019,25,0.019,34,1.07,74,1.355,75,2.075,140,4.141,165,2.928,531,2.714,690,3.855,691,4.358,813,4.358,814,5.123]],["title/injectables/RefreshStrategy.html",[74,0.781,158,2.18]],["body/injectables/RefreshStrategy.html",[0,0.144,3,0.255,4,0.225,5,0.225,7,0.383,11,0.703,12,0.023,16,0.652,18,0.436,22,0.255,24,0.016,25,0.016,30,1.695,33,1.272,34,0.788,38,1.198,74,1.116,75,1.527,86,2.837,94,1.913,95,1.26,96,1.913,118,1.693,158,3.118,163,1.129,165,2.155,168,2.339,172,2.56,176,2.837,183,2.604,185,2.662,186,2.155,187,3.446,190,2.872,205,2.339,206,2.155,207,1.527,214,2.168,218,2.155,219,1.998,228,1.998,327,1.627,354,2.837,531,1.998,544,2.339,694,4.275,696,4.275,698,4.275,699,3.208,700,3.208,701,3.208,702,2.837,703,3.208,704,3.208,705,3.208,707,3.208,708,3.208,709,3.208,710,3.208,711,2.837,815,3.208,816,3.77,817,3.77,818,3.77]],["title/classes/RegisterDto.html",[0,0.135,125,2.18]],["body/classes/RegisterDto.html",[0,0.174,2,0.974,3,0.22,4,0.194,5,0.194,7,0.33,8,1.283,9,2.39,11,0.887,12,0.023,13,1.418,14,1.589,16,0.823,18,0.307,19,2.407,21,1.165,22,0.22,24,0.015,25,0.015,125,2.819,128,2.612,168,2.018,220,3.555,221,3.7,222,3.249,223,4.013,224,3.555,225,3.555,226,3.94,713,2.768,714,3.849,715,4.265,716,4.265,718,2.993,720,2.736,721,2.446,722,2.407,819,2.768,820,3.253,821,3.253,822,3.253,823,3.253,824,3.253,825,3.253,826,3.253,827,3.253,828,3.253,829,3.253,830,2.018,831,2.597,832,2.819,833,2.768]],["title/classes/UpdateAvatarDto.html",[0,0.135,738,2.18]],["body/classes/UpdateAvatarDto.html",[0,0.222,2,1.409,3,0.318,4,0.281,5,0.281,7,0.478,8,1.635,9,2.208,11,0.81,12,0.023,13,1.368,16,0.611,18,0.318,21,1.685,22,0.318,24,0.018,25,0.018,111,2.493,113,3.195,234,4.261,236,3.541,237,3.541,539,3.195,720,2.031,721,2.031,722,2.493,738,3.594,831,2.69,832,2.919,834,4.003,835,4.705]],["title/classes/UpdateDto.html",[0,0.135,748,2.18]],["body/classes/UpdateDto.html",[0,0.175,2,0.979,3,0.221,4,0.195,5,0.195,7,0.332,8,1.287,9,2.391,11,0.888,12,0.023,13,1.419,14,1.592,16,0.824,18,0.308,21,1.171,22,0.221,24,0.015,25,0.015,128,2.617,208,3.565,220,3.565,221,3.706,222,3.257,223,4.018,224,3.565,225,3.565,427,1.869,714,3.857,715,4.274,716,4.274,720,1.411,721,2.451,722,2.416,748,2.829,830,2.028,831,2.606,832,4.081,833,2.781,836,2.781,837,3.269,838,3.269,839,3.269,840,3.269,841,3.269,842,3.269,843,5.25,844,3.269,845,3.269,846,3.269,847,3.269]],["title/classes/User.html",[0,0.135,118,1.052]],["body/classes/User.html",[0,0.09,2,0.702,3,0.158,4,0.14,5,0.14,7,0.238,8,1.01,11,0.953,12,0.023,13,1.465,14,1.646,16,0.852,18,0.242,22,0.328,24,0.011,25,0.011,73,2.297,111,1.895,113,2.429,118,1.453,163,0.702,167,1.243,181,1.243,196,1.765,207,0.95,208,3.294,214,1.012,220,3.294,221,3.009,222,2.69,223,3.414,224,3.294,225,2.944,226,3.262,234,2.944,236,2.691,237,2.691,238,3.689,304,1.765,327,1.012,445,1.995,468,3.689,500,1.593,505,1.995,508,3.689,525,3.262,531,1.895,532,3.262,533,5.127,536,4.141,537,3.262,539,3.737,542,1.765,543,1.765,544,1.455,545,2.691,547,2.691,588,2.297,644,3.689,649,2.691,651,1.995,652,3.65,657,1.995,659,1.995,806,4.126,848,1.593,849,2.345,850,2.345,851,2.345,852,2.345,853,2.345,854,2.345,855,2.345,856,2.345,857,2.345,858,2.345,859,2.345,860,2.345,861,4.85,862,2.345,863,2.345,864,2.345,865,3.577,866,3.043,867,3.043,868,3.043,869,3.043,870,2.345,871,1.995,872,2.345,873,2.345,874,2.345,875,1.995]],["title/coverage.html",[876,3.605]],["body/coverage.html",[0,0.261,1,1.806,5,0.174,6,2.476,10,1.436,11,0.407,12,0.023,24,0.013,25,0.013,26,2.315,27,1.977,29,2.476,35,1.664,46,1.436,74,1.444,76,2.476,80,1.806,81,2.476,89,1.806,118,0.872,120,1.341,123,1.436,125,1.806,133,1.664,137,1.542,140,1.977,158,1.806,167,1.542,182,3.159,195,2.476,215,2.19,235,6.113,283,1.977,290,2.476,299,1.806,300,2.476,302,1.977,303,2.476,320,1.806,324,1.806,335,1.806,341,1.806,369,1.664,429,1.977,431,2.476,530,3.159,549,1.977,550,2.476,564,1.806,573,1.806,583,2.19,586,1.664,588,1.542,617,1.977,618,2.476,684,3.159,690,3.159,693,2.476,712,2.476,723,1.977,724,2.476,738,1.806,748,1.806,753,1.664,777,2.476,813,2.476,815,2.476,819,2.476,834,2.476,836,2.476,848,2.851,875,2.476,876,2.19,877,2.911,878,2.911,879,2.911,880,6.284,881,2.911,882,2.911,883,2.911,884,5.392,885,6.139,886,5.716,887,4.925,888,2.911,889,2.476,890,4.199,891,2.476,892,2.476,893,2.476,894,2.911,895,2.911,896,2.911,897,2.476,898,2.476,899,2.911,900,2.911,901,2.911,902,2.476,903,2.911,904,2.911,905,2.911]],["title/classes/createEventDto.html",[0,0.135,320,2.18]],["body/classes/createEventDto.html",[0,0.208,2,1.274,3,0.287,4,0.254,5,0.254,7,0.432,8,1.535,9,2.34,11,0.838,12,0.023,13,1.394,14,1.502,15,3.2,16,0.778,18,0.287,19,2.88,20,2.431,21,1.523,22,0.287,23,2.888,24,0.017,25,0.017,95,1.502,320,3.373,483,4.069,484,4.069,718,3.108,720,2.586,721,2.586,722,2.254,830,2.639,831,2.431,889,3.619,906,4.253,907,4.253,908,4.253]],["title/classes/createGroupDto.html",[0,0.135,564,2.18]],["body/classes/createGroupDto.html",[0,0.226,2,1.456,3,0.328,4,0.29,5,0.29,7,0.493,8,1.668,9,2.147,11,0.68,12,0.022,13,1.234,14,1.219,16,0.631,18,0.328,21,1.741,22,0.328,24,0.019,25,0.019,95,1.596,564,3.665,718,2.778,720,2.549,721,2.549,897,4.135,909,4.86]],["title/dependencies.html",[43,2.084,910,2.497]],["body/dependencies.html",[0,0.216,12,0.023,21,1.616,24,0.018,25,0.018,34,0.943,43,2.226,68,3.065,83,3.396,161,3.396,163,1.352,165,2.58,172,3.065,207,1.828,210,3.84,212,3.84,213,3.84,374,3.84,375,4.802,702,3.396,911,6.452,912,4.513,913,4.513,914,4.513,915,4.513,916,4.513,917,4.513,918,4.513,919,4.513,920,4.513,921,4.513,922,4.513,923,4.513,924,4.513,925,4.513,926,4.513,927,4.513,928,4.513,929,4.513,930,4.513]],["title/classes/editEventDto.html",[0,0.135,335,2.18]],["body/classes/editEventDto.html",[0,0.207,2,1.258,3,0.284,4,0.251,5,0.251,7,0.426,8,1.522,9,2.334,11,0.833,12,0.023,13,1.39,14,1.493,16,0.773,18,0.284,19,2.857,20,2.401,21,1.504,22,0.284,23,2.852,24,0.017,25,0.017,95,1.493,335,3.345,483,4.044,484,4.044,720,2.57,721,2.57,722,2.225,830,2.605,831,2.401,832,3.899,892,3.573,931,5.392,932,4.199,933,4.199,934,4.199,935,4.199]],["title/miscellaneous/enumerations.html",[936,1.678,937,3.594]],["body/miscellaneous/enumerations.html",[7,0.508,12,0.022,24,0.019,25,0.019,118,1.802,208,4.084,223,3.732,848,3.4,866,5.117,867,5.117,868,5.117,869,5.117,936,2.862,937,4.26,938,5.117,939,5.82]],["title/miscellaneous/functions.html",[936,1.678,940,3.594]],["body/miscellaneous/functions.html",[7,0.554,12,0.02,24,0.02,25,0.02,46,3.298,902,4.645,936,3.121,940,4.645,941,5.46]],["title/index.html",[7,0.298,942,2.935,943,2.935]],["body/index.html",[4,0.238,12,0.023,24,0.017,25,0.017,97,2.706,287,3.922,714,2.706,876,2.999,944,3.985,945,3.985,946,5.212,947,3.985,948,3.985,949,3.985,950,3.985,951,3.985,952,3.985,953,5.808,954,3.985,955,3.985,956,3.985,957,3.985,958,6.777,959,3.985,960,3.985,961,3.985,962,6.682,963,3.985,964,3.985,965,5.212,966,3.985,967,3.985,968,3.985,969,3.985,970,3.985,971,3.985,972,5.212,973,3.985,974,3.985,975,3.985,976,5.212,977,5.212,978,3.985,979,3.985,980,3.985,981,3.985,982,3.985,983,3.39,984,3.985,985,3.985,986,3.985,987,3.985,988,3.985,989,3.985,990,3.985,991,3.985,992,3.985,993,3.39,994,3.985,995,3.985,996,3.985,997,3.985,998,3.985,999,3.985,1000,3.39]],["title/modules.html",[42,2.208]],["body/modules.html",[12,0.019,24,0.019,25,0.019,41,3.4,42,2.307,52,3.106,53,2.862,54,3.106,55,3.106,56,3.106,983,5.82,1001,6.841,1002,6.841,1003,6.947,1004,5.007,1005,5.007]],["title/overview.html",[1006,4.076]],["body/overview.html",[2,1.129,12,0.023,24,0.016,25,0.016,28,1.527,35,3.231,40,1.35,41,4.774,42,1.737,43,1.86,44,2.155,45,2.155,46,1.86,47,1.998,48,1.998,49,3.208,50,3.208,51,3.208,52,4.206,53,3.231,54,4.09,55,4.09,56,4.09,57,2.872,58,2.155,59,2.155,75,1.527,120,2.975,133,3.231,156,3.208,157,3.208,158,3.507,230,3.208,369,3.231,423,3.208,424,3.208,586,3.231,613,3.208,614,3.208,753,3.231,772,3.208,773,3.208,1006,3.208,1007,3.77,1008,3.77,1009,3.77]],["title/properties.html",[8,1.193,910,2.497]],["body/properties.html",[8,1.523,12,0.023,24,0.02,25,0.02,97,3.662,993,4.588,1000,4.588,1010,5.393,1011,5.393,1012,5.393]],["title/classes/rateEventDto.html",[0,0.135,324,2.18]],["body/classes/rateEventDto.html",[0,0.215,2,1.338,3,0.302,4,0.267,5,0.267,7,0.453,8,1.583,9,2.279,11,0.784,12,0.023,13,1.343,14,1.406,16,0.728,18,0.302,19,2.367,20,2.554,21,1.6,22,0.302,24,0.018,25,0.018,324,3.48,500,4.163,502,4.613,718,2.554,720,2.645,721,2.645,722,2.367,830,2.772,831,2.554,832,3.48,893,3.801,1013,4.468,1014,4.468,1015,4.468]],["title/classes/removeEventRateDto.html",[0,0.135,341,2.18]],["body/classes/removeEventRateDto.html",[0,0.225,2,1.445,3,0.326,4,0.288,5,0.288,7,0.49,8,1.661,9,2.14,11,0.675,12,0.022,13,1.229,14,1.21,16,0.626,18,0.326,19,2.556,20,2.758,21,1.728,22,0.326,24,0.019,25,0.019,341,3.649,720,2.538,721,2.538,891,4.105,1016,6.345,1017,4.825,1018,4.825]],["title/classes/sendMessageDto.html",[0,0.135,573,2.18]],["body/classes/sendMessageDto.html",[0,0.226,2,1.456,3,0.328,4,0.29,5,0.29,7,0.493,8,1.668,9,2.147,11,0.68,12,0.022,13,1.234,14,1.219,16,0.631,18,0.328,21,1.741,22,0.328,24,0.019,25,0.019,128,2.933,573,3.665,718,2.778,720,2.549,721,2.549,898,4.135,1019,4.86]],["title/miscellaneous/variables.html",[936,1.678,1020,3.594]],["body/miscellaneous/variables.html",[7,0.495,12,0.022,24,0.019,25,0.019,123,2.406,167,3.137,182,3.671,215,4.455,216,4.15,217,4.15,429,4.021,530,3.671,548,4.15,617,4.021,684,3.671,689,4.15,848,3.313,871,4.15,936,2.789,938,4.15,939,5.64,1020,4.15,1021,4.878,1022,4.878,1023,4.878,1024,6.63]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"coverage.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"dependencies.html":{},"classes/editEventDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1011,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":894,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":888,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":886,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":890,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":887,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":899,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":873,"title":{},"body":{"classes/User.html":{}}}],["1.4.7",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["10.0.3",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["11000",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{}}}],["123456",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["134575829737",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["15",{"_index":1009,"title":{},"body":{"overview.html":{}}}],["2.3.1",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":881,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":883,"title":{},"body":{"coverage.html":{}}}],["3d",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["4.0.1",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["4.18.2",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1008,"title":{},"body":{"overview.html":{}}}],["50",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1007,"title":{},"body":{"overview.html":{}}}],["60",{"_index":875,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["7.1.0",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["90d",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["__v",{"_index":711,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["_id",{"_index":649,"title":{},"body":{"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/User.html":{}}}],["acceptinvitation",{"_index":552,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["acceptinvitation(@query('group_id",{"_index":606,"title":{},"body":{"controllers/GroupController.html":{}}}],["acceptinvitation(id",{"_index":560,"title":{},"body":{"controllers/GroupController.html":{}}}],["acceptinvitation(user",{"_index":622,"title":{},"body":{"injectables/GroupService.html":{}}}],["activities",{"_index":546,"title":{},"body":{"classes/Events.html":{}}}],["actualrefresh",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["addevent",{"_index":305,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["addevent(@req",{"_index":382,"title":{},"body":{"controllers/EventController.html":{}}}],["addevent(req",{"_index":316,"title":{},"body":{"controllers/EventController.html":{}}}],["addevent(userid",{"_index":440,"title":{},"body":{"injectables/EventService.html":{}}}],["addevent.events",{"_index":475,"title":{},"body":{"injectables/EventService.html":{}}}],["addeventdto",{"_index":1,"title":{"classes/AddEventDto.html":{}},"body":{"classes/AddEventDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"coverage.html":{}}}],["address",{"_index":484,"title":{},"body":{"injectables/EventService.html":{},"classes/Events.html":{},"classes/createEventDto.html":{},"classes/editEventDto.html":{}}}],["addtoset",{"_index":473,"title":{},"body":{"injectables/EventService.html":{},"injectables/GroupService.html":{}}}],["addunboredevent",{"_index":306,"title":{},"body":{"controllers/EventController.html":{}}}],["addunboredevent(@body",{"_index":391,"title":{},"body":{"controllers/EventController.html":{}}}],["addunboredevent(createeventdto",{"_index":319,"title":{},"body":{"controllers/EventController.html":{}}}],["addunboredeventrate",{"_index":307,"title":{},"body":{"controllers/EventController.html":{}}}],["addunboredeventrate(@query('id",{"_index":400,"title":{},"body":{"controllers/EventController.html":{}}}],["addunboredeventrate(id",{"_index":323,"title":{},"body":{"controllers/EventController.html":{}}}],["addunboredrateevent",{"_index":432,"title":{},"body":{"injectables/EventService.html":{}}}],["addunboredrateevent(eventid",{"_index":443,"title":{},"body":{"injectables/EventService.html":{}}}],["already",{"_index":659,"title":{},"body":{"injectables/GroupService.html":{},"classes/User.html":{}}}],["amazing",{"_index":984,"title":{},"body":{"index.html":{}}}],["app",{"_index":960,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":27,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":952,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":41,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":35,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arrayminsize",{"_index":20,"title":{},"body":{"classes/AddEventDto.html":{},"classes/DeleteEventDto.html":{},"classes/createEventDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{}}}],["arrayminsize(1",{"_index":23,"title":{},"body":{"classes/AddEventDto.html":{},"classes/DeleteEventDto.html":{},"classes/createEventDto.html":{},"classes/editEventDto.html":{}}}],["async",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["audience",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["auth.controller",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["auth.guard.ts",{"_index":690,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/RefreshGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/jwt",{"_index":363,"title":{},"body":{"controllers/EventController.html":{},"controllers/ProfileController.html":{}}}],["auth/schemas/user.schema",{"_index":427,"title":{},"body":{"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/UpdateDto.html":{}}}],["auth/strategies/jwt.strategy",{"_index":428,"title":{},"body":{"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{}}}],["authcontroller",{"_index":80,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authguard",{"_index":691,"title":{},"body":{"injectables/JwtGuard.html":{},"injectables/RefreshGuard.html":{}}}],["authguard('jwt",{"_index":692,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authguard('refresh",{"_index":814,"title":{},"body":{"injectables/RefreshGuard.html":{}}}],["authmodule",{"_index":52,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":993,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":133,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["autre",{"_index":868,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["available",{"_index":1005,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":726,"title":{},"body":{"controllers/ProfileController.html":{}}}],["avatar(@req",{"_index":764,"title":{},"body":{"controllers/ProfileController.html":{}}}],["avatar(req",{"_index":731,"title":{},"body":{"controllers/ProfileController.html":{}}}],["avatars",{"_index":727,"title":{},"body":{"controllers/ProfileController.html":{}}}],["avatars(@req",{"_index":767,"title":{},"body":{"controllers/ProfileController.html":{}}}],["avatars(req",{"_index":734,"title":{},"body":{"controllers/ProfileController.html":{}}}],["avatarupdate",{"_index":809,"title":{},"body":{"injectables/ProfileService.html":{}}}],["avatarupdate.style",{"_index":812,"title":{},"body":{"injectables/ProfileService.html":{}}}],["await",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["backers",{"_index":985,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":362,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["badrequestexception(\"bad",{"_index":421,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["bcrypt",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(password",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptjs",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["birthdate",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{}}}],["body",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{},"classes/UpdateAvatarDto.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1003,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1001,"title":{},"body":{"modules.html":{}}}],["building",{"_index":947,"title":{},"body":{"index.html":{}}}],["catch",{"_index":528,"title":{},"body":{"injectables/EventService.html":{}}}],["catch(err",{"_index":417,"title":{},"body":{"controllers/EventController.html":{}}}],["catch(error",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{}}}],["categories",{"_index":483,"title":{},"body":{"injectables/EventService.html":{},"classes/Events.html":{},"classes/createEventDto.html":{},"classes/editEventDto.html":{}}}],["cc",{"_index":512,"title":{},"body":{"injectables/EventService.html":{}}}],["cc.event",{"_index":520,"title":{},"body":{"injectables/EventService.html":{}}}],["changeavatar",{"_index":728,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["changeavatar(@req",{"_index":770,"title":{},"body":{"controllers/ProfileController.html":{}}}],["changeavatar(id",{"_index":781,"title":{},"body":{"injectables/ProfileService.html":{}}}],["changeavatar(req",{"_index":737,"title":{},"body":{"controllers/ProfileController.html":{}}}],["class",{"_index":0,"title":{"classes/AddEventDto.html":{},"classes/DeleteEventDto.html":{},"classes/Events.html":{},"classes/Groups.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"coverage.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"dependencies.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddEventDto.html":{},"classes/DeleteEventDto.html":{},"classes/Events.html":{},"classes/Groups.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"overview.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["client",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["client.verifyidtoken",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eventmodule",{"_index":423,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_eventmodule_providers",{"_index":424,"title":{},"body":{"modules/EventModule.html":{},"overview.html":{}}}],["cluster_groupmodule",{"_index":613,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_groupmodule_providers",{"_index":614,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":772,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":773,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["comment",{"_index":870,"title":{},"body":{"classes/User.html":{}}}],["comments",{"_index":502,"title":{},"body":{"injectables/EventService.html":{},"classes/Events.html":{},"classes/rateEventDto.html":{}}}],["configmodule",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":282,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('node_env",{"_index":286,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["conflictexception",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{}}}],["conflictexception(\"duplicate",{"_index":496,"title":{},"body":{"injectables/EventService.html":{}}}],["conflictexception(\"duplicated",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{}}}],["conflictexception(\"you",{"_index":677,"title":{},"body":{"injectables/GroupService.html":{}}}],["conflictexception('already",{"_index":804,"title":{},"body":{"injectables/ProfileService.html":{}}}],["conflictexception('email",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["connection",{"_index":293,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["console.log(\"verified",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(file",{"_index":415,"title":{},"body":{"controllers/EventController.html":{}}}],["console.log(tokenid",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{},"classes/User.html":{}}}],["constructor",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["constructor(@injectconnection",{"_index":297,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["constructor(connection",{"_index":292,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["constructor(private",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["constructor(usermodel",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["controller",{"_index":26,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('event",{"_index":376,"title":{},"body":{"controllers/EventController.html":{}}}],["controller('group",{"_index":590,"title":{},"body":{"controllers/GroupController.html":{}}}],["controller('profile",{"_index":755,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controllers",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["correct",{"_index":716,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{}}}],["coverage",{"_index":876,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["createdat",{"_index":657,"title":{},"body":{"injectables/GroupService.html":{},"classes/User.html":{}}}],["createeventdto",{"_index":320,"title":{"classes/createEventDto.html":{}},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"coverage.html":{},"classes/createEventDto.html":{}}}],["creategroup",{"_index":553,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["creategroup(@req",{"_index":599,"title":{},"body":{"controllers/GroupController.html":{}}}],["creategroup(req",{"_index":563,"title":{},"body":{"controllers/GroupController.html":{}}}],["creategroup(user",{"_index":625,"title":{},"body":{"injectables/GroupService.html":{}}}],["creategroupdto",{"_index":564,"title":{"classes/createGroupDto.html":{}},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{},"coverage.html":{},"classes/createGroupDto.html":{}}}],["createunboredevent",{"_index":433,"title":{},"body":{"injectables/EventService.html":{}}}],["createunboredevent(createeventdto",{"_index":446,"title":{},"body":{"injectables/EventService.html":{}}}],["credentials",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["current",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["data/images",{"_index":409,"title":{},"body":{"controllers/EventController.html":{}}}],["database",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["database.service",{"_index":284,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["databasemodule",{"_index":53,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databasemodule.forroot",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseservice",{"_index":283,"title":{"injectables/DatabaseService.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"coverage.html":{}}}],["date",{"_index":652,"title":{},"body":{"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/User.html":{}}}],["declarations",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"classes/Groups.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["default",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["definition",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["delete",{"_index":355,"title":{},"body":{"controllers/EventController.html":{},"controllers/GroupController.html":{}}}],["delete('/delete",{"_index":384,"title":{},"body":{"controllers/EventController.html":{},"controllers/GroupController.html":{}}}],["delete('/deleteevent",{"_index":393,"title":{},"body":{"controllers/EventController.html":{}}}],["delete('/removerate",{"_index":403,"title":{},"body":{"controllers/EventController.html":{}}}],["deleted",{"_index":491,"title":{},"body":{"injectables/EventService.html":{}}}],["deleteevent",{"_index":308,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["deleteevent(@req",{"_index":385,"title":{},"body":{"controllers/EventController.html":{}}}],["deleteevent(req",{"_index":328,"title":{},"body":{"controllers/EventController.html":{}}}],["deleteevent.events",{"_index":478,"title":{},"body":{"injectables/EventService.html":{}}}],["deleteeventdto",{"_index":299,"title":{"classes/DeleteEventDto.html":{}},"body":{"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"coverage.html":{}}}],["deleteinvitation",{"_index":554,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["deleteinvitation(@query('group_id",{"_index":608,"title":{},"body":{"controllers/GroupController.html":{}}}],["deleteinvitation(id",{"_index":567,"title":{},"body":{"controllers/GroupController.html":{}}}],["deleteinvitation(user",{"_index":627,"title":{},"body":{"injectables/GroupService.html":{}}}],["deleteunboredevent",{"_index":309,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["deleteunboredevent(@query('id",{"_index":394,"title":{},"body":{"controllers/EventController.html":{}}}],["deleteunboredevent(eventid",{"_index":448,"title":{},"body":{"injectables/EventService.html":{}}}],["deleteunboredevent(id",{"_index":331,"title":{},"body":{"controllers/EventController.html":{}}}],["deleteunboredrate",{"_index":434,"title":{},"body":{"injectables/EventService.html":{}}}],["deleteunboredrate(userid",{"_index":450,"title":{},"body":{"injectables/EventService.html":{}}}],["dependencies",{"_index":43,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{},"properties.html":{}}}],["dest",{"_index":408,"title":{},"body":{"controllers/EventController.html":{}}}],["development",{"_index":961,"title":{},"body":{"index.html":{}}}],["doccumentation",{"_index":969,"title":{},"body":{"index.html":{}}}],["document",{"_index":532,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"classes/User.html":{}}}],["documentation",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["dto/addevent.dto",{"_index":364,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["dto/createevent.dto",{"_index":365,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["dto/creategroup.dto",{"_index":584,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["dto/deleteeventrate.dto",{"_index":372,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["dto/editevent.dto",{"_index":366,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["dto/login.dto",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/rateevent.dto",{"_index":367,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["dto/register.dto",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/removeevent.dto",{"_index":368,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["dto/sendmessage.dto",{"_index":585,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["dto/update.dto",{"_index":751,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["dto/updateavatar.dto",{"_index":752,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["duplicated",{"_index":545,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"classes/User.html":{}}}],["dynamicmodule",{"_index":281,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["e2e",{"_index":973,"title":{},"body":{"index.html":{}}}],["each",{"_index":474,"title":{},"body":{"injectables/EventService.html":{}}}],["editeventdto",{"_index":335,"title":{"classes/editEventDto.html":{}},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"coverage.html":{},"classes/editEventDto.html":{}}}],["editunboredevent",{"_index":310,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["editunboredevent(@query('id",{"_index":397,"title":{},"body":{"controllers/EventController.html":{}}}],["editunboredevent(editeventdto",{"_index":452,"title":{},"body":{"injectables/EventService.html":{}}}],["editunboredevent(id",{"_index":334,"title":{},"body":{"controllers/EventController.html":{}}}],["efficient",{"_index":948,"title":{},"body":{"index.html":{}}}],["email",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{}}}],["email+'asdsdsddsds",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["enter",{"_index":715,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{}}}],["entered",{"_index":547,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"classes/User.html":{}}}],["enum",{"_index":865,"title":{},"body":{"classes/User.html":{}}}],["enumerations",{"_index":937,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":529,"title":{},"body":{"injectables/EventService.html":{}}}],["error.code",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{}}}],["event",{"_index":304,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/User.html":{}}}],["event.controller",{"_index":426,"title":{},"body":{"modules/EventModule.html":{}}}],["event.service",{"_index":370,"title":{},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{}}}],["event/event.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["eventadder",{"_index":869,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["eventcontroller",{"_index":302,"title":{"controllers/EventController.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"coverage.html":{}}}],["eventid",{"_index":445,"title":{},"body":{"injectables/EventService.html":{},"classes/User.html":{}}}],["eventmodel",{"_index":438,"title":{},"body":{"injectables/EventService.html":{}}}],["eventmodule",{"_index":54,"title":{"modules/EventModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventModule.html":{},"modules.html":{},"overview.html":{}}}],["events",{"_index":10,"title":{"classes/Events.html":{}},"body":{"classes/AddEventDto.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"coverage.html":{}}}],["eventschema",{"_index":429,"title":{},"body":{"modules/EventModule.html":{},"classes/Events.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["eventservice",{"_index":369,"title":{"injectables/EventService.html":{}},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"coverage.html":{},"overview.html":{}}}],["existing",{"_index":494,"title":{},"body":{"injectables/EventService.html":{}}}],["exists",{"_index":486,"title":{},"body":{"injectables/EventService.html":{},"injectables/GroupService.html":{}}}],["expireafterseconds",{"_index":874,"title":{},"body":{"classes/User.html":{}}}],["expiresin",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":22,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["exports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["express",{"_index":375,"title":{},"body":{"controllers/EventController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":351,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["extends",{"_index":531,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"classes/User.html":{}}}],["extractjwt",{"_index":701,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":706,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromheader(\"refresh",{"_index":818,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["false",{"_index":544,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"classes/User.html":{}}}],["femme",{"_index":867,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"coverage.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["file.filename",{"_index":523,"title":{},"body":{"injectables/EventService.html":{}}}],["fileinterceptor",{"_index":373,"title":{},"body":{"controllers/EventController.html":{}}}],["filetypevalidator",{"_index":360,"title":{},"body":{"controllers/EventController.html":{}}}],["filetypevalidator({filetype",{"_index":413,"title":{},"body":{"controllers/EventController.html":{}}}],["find",{"_index":488,"title":{},"body":{"injectables/EventService.html":{},"injectables/GroupService.html":{}}}],["findid",{"_index":492,"title":{},"body":{"injectables/EventService.html":{}}}],["forroot",{"_index":276,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["forroot(uri",{"_index":277,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["found",{"_index":509,"title":{},"body":{"injectables/EventService.html":{},"injectables/GroupService.html":{}}}],["framework",{"_index":946,"title":{},"body":{"index.html":{}}}],["fs",{"_index":418,"title":{},"body":{"controllers/EventController.html":{}}}],["fs.unlinksync(file.path",{"_index":420,"title":{},"body":{"controllers/EventController.html":{}}}],["function",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["functions",{"_index":940,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["get('/avatar",{"_index":763,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get('/avatars",{"_index":766,"title":{},"body":{"controllers/ProfileController.html":{}}}],["get('/invitations",{"_index":595,"title":{},"body":{"controllers/GroupController.html":{}}}],["get('/lists",{"_index":379,"title":{},"body":{"controllers/EventController.html":{}}}],["get('/show",{"_index":387,"title":{},"body":{"controllers/EventController.html":{},"controllers/GroupController.html":{}}}],["getdbhandle",{"_index":291,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["geteventbyid",{"_index":435,"title":{},"body":{"injectables/EventService.html":{}}}],["geteventbyid(eventid",{"_index":454,"title":{},"body":{"injectables/EventService.html":{}}}],["gethello",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofilebyid",{"_index":729,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["getprofilebyid(@query('id",{"_index":758,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofilebyid(id",{"_index":741,"title":{},"body":{"controllers/ProfileController.html":{}}}],["getprofilebyid(profilid",{"_index":783,"title":{},"body":{"injectables/ProfileService.html":{}}}],["getting",{"_index":942,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":796,"title":{},"body":{"injectables/ProfileService.html":{}}}],["google",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["googlelogin",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlelogin(tokenid",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["graph",{"_index":1004,"title":{},"body":{"modules.html":{}}}],["group",{"_index":551,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["group._id",{"_index":650,"title":{},"body":{"injectables/GroupService.html":{}}}],["group.controller",{"_index":616,"title":{},"body":{"modules/GroupModule.html":{}}}],["group.members.includes(userid",{"_index":661,"title":{},"body":{"injectables/GroupService.html":{}}}],["group.service",{"_index":587,"title":{},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{}}}],["group/group.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["groupcontroller",{"_index":549,"title":{"controllers/GroupController.html":{}},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{},"coverage.html":{}}}],["groupdid",{"_index":632,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupid",{"_index":623,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupmodel",{"_index":620,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupmodule",{"_index":55,"title":{"modules/GroupModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GroupModule.html":{},"modules.html":{},"overview.html":{}}}],["groups",{"_index":588,"title":{"classes/Groups.html":{}},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/User.html":{},"coverage.html":{}}}],["groups._id",{"_index":676,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupschema",{"_index":617,"title":{},"body":{"modules/GroupModule.html":{},"classes/Groups.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["groupservice",{"_index":586,"title":{"injectables/GroupService.html":{}},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"coverage.html":{},"overview.html":{}}}],["grow",{"_index":980,"title":{},"body":{"index.html":{}}}],["guards/jwt",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/refresh",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["hash",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["head",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateAvatarDto.html":{},"classes/User.html":{}}}],["head.refresh",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["hehe",{"_index":668,"title":{},"body":{"injectables/GroupService.html":{}}}],["hehe1",{"_index":510,"title":{},"body":{"injectables/EventService.html":{}}}],["hehe1.rates.find(rate",{"_index":513,"title":{},"body":{"injectables/EventService.html":{}}}],["hello",{"_index":78,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":990,"title":{},"body":{"index.html":{}}}],["homme",{"_index":866,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["http",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["httpcode",{"_index":794,"title":{},"body":{"injectables/ProfileService.html":{}}}],["https://nestjs.com",{"_index":997,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["httpstatus.accepted",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.accepted,token",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.conflict",{"_index":658,"title":{},"body":{"injectables/GroupService.html":{}}}],["httpstatus.created",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{}}}],["httpstatus.not_acceptable",{"_index":664,"title":{},"body":{"injectables/GroupService.html":{}}}],["httpstatus.ok",{"_index":467,"title":{},"body":{"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{}}}],["httpstatus.ok,style",{"_index":811,"title":{},"body":{"injectables/ProfileService.html":{}}}],["id",{"_index":327,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{},"classes/User.html":{}}}],["identifier",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["idrate",{"_index":505,"title":{},"body":{"injectables/EventService.html":{},"classes/User.html":{}}}],["idtoken",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["ignoreexpiration",{"_index":707,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["image",{"_index":526,"title":{},"body":{"injectables/EventService.html":{}}}],["import",{"_index":18,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["imports",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{}}}],["imports:[mongoosemodule.forfeature",{"_index":776,"title":{},"body":{"modules/ProfileModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["inject",{"_index":289,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["injectable",{"_index":74,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"coverage.html":{}}}],["injectables",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"overview.html":{}}}],["injectconnection",{"_index":296,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["injectmodel",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["injectmodel(events.name",{"_index":466,"title":{},"body":{"injectables/EventService.html":{}}}],["injectmodel(groups.name",{"_index":640,"title":{},"body":{"injectables/GroupService.html":{}}}],["injectmodel(user.name",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["installation",{"_index":957,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":959,"title":{},"body":{"index.html":{}}}],["internalservererrorexception",{"_index":463,"title":{},"body":{"injectables/EventService.html":{}}}],["invitation",{"_index":660,"title":{},"body":{"injectables/GroupService.html":{}}}],["invitations",{"_index":644,"title":{},"body":{"injectables/GroupService.html":{},"classes/User.html":{}}}],["invitations._id",{"_index":655,"title":{},"body":{"injectables/GroupService.html":{}}}],["inviteingroup",{"_index":555,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["inviteingroup(@query('group_id",{"_index":602,"title":{},"body":{"controllers/GroupController.html":{}}}],["inviteingroup(groupid",{"_index":629,"title":{},"body":{"injectables/GroupService.html":{}}}],["inviteingroup(id",{"_index":569,"title":{},"body":{"controllers/GroupController.html":{}}}],["isarray",{"_index":19,"title":{},"body":{"classes/AddEventDto.html":{},"classes/DeleteEventDto.html":{},"classes/RegisterDto.html":{},"classes/createEventDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{}}}],["isarray()@arrayminsize(1",{"_index":15,"title":{},"body":{"classes/AddEventDto.html":{},"classes/DeleteEventDto.html":{},"classes/createEventDto.html":{}}}],["isdatestring",{"_index":831,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/createEventDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{}}}],["isemail",{"_index":722,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/createEventDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{}}}],["isenum",{"_index":830,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/createEventDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{}}}],["isenum(gender",{"_index":833,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UpdateDto.html":{}}}],["isglobal",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":720,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["isnotempty()@isdatestring",{"_index":820,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isnotempty()@isemail",{"_index":713,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isenum(gender",{"_index":823,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isnotempty()@isstring",{"_index":718,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/rateEventDto.html":{},"classes/sendMessageDto.html":{}}}],["isnotempty()@isstring()@isoptional",{"_index":1013,"title":{},"body":{"classes/rateEventDto.html":{}}}],["isoptional",{"_index":832,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{}}}],["isoptional()@isarray",{"_index":827,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isoptional()@isarray()@arrayminsize(1",{"_index":933,"title":{},"body":{"classes/editEventDto.html":{}}}],["isoptional()@isdatestring",{"_index":837,"title":{},"body":{"classes/UpdateDto.html":{}}}],["isoptional()@isemail",{"_index":839,"title":{},"body":{"classes/UpdateDto.html":{}}}],["isoptional()@isenum(gender",{"_index":841,"title":{},"body":{"classes/UpdateDto.html":{}}}],["isoptional()@isnotempty()@isstring",{"_index":931,"title":{},"body":{"classes/editEventDto.html":{}}}],["isoptional()@isstring",{"_index":843,"title":{},"body":{"classes/UpdateDto.html":{}}}],["isstring",{"_index":721,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["isstring()@isnotempty",{"_index":1017,"title":{},"body":{"classes/removeEventRateDto.html":{}}}],["join",{"_index":987,"title":{},"body":{"index.html":{}}}],["joined",{"_index":671,"title":{},"body":{"injectables/GroupService.html":{}}}],["joinedat",{"_index":651,"title":{},"body":{"injectables/GroupService.html":{},"classes/User.html":{}}}],["jwt",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":705,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["jwtguard",{"_index":137,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"injectables/JwtGuard.html":{},"controllers/ProfileController.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":120,"title":{"injectables/JwtStrategy.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"injectables/JwtStrategy.html":{},"modules/ProfileModule.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":994,"title":{},"body":{"index.html":{}}}],["key",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{}}}],["leader",{"_index":647,"title":{},"body":{"injectables/GroupService.html":{},"classes/Groups.html":{}}}],["legend",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["library",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["license",{"_index":1000,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":977,"title":{},"body":{"index.html":{}}}],["list",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["listallevent",{"_index":311,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["literal",{"_index":539,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"classes/UpdateAvatarDto.html":{},"classes/User.html":{}}}],["login",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":89,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logingoogle",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["logingoogle(@body",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["logingoogle(body",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["matching",{"_index":25,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"coverage.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"dependencies.html":{},"classes/editEventDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{},"miscellaneous/variables.html":{}}}],["members",{"_index":666,"title":{},"body":{"injectables/GroupService.html":{},"classes/Groups.html":{}}}],["message",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/sendMessageDto.html":{}}}],["messages",{"_index":682,"title":{},"body":{"injectables/GroupService.html":{},"classes/Groups.html":{}}}],["metadata",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["methods",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["miscellaneous",{"_index":936,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":976,"title":{},"body":{"index.html":{}}}],["mode",{"_index":965,"title":{},"body":{"index.html":{}}}],["model",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["modified",{"_index":801,"title":{},"body":{"injectables/ProfileService.html":{}}}],["module",{"_index":40,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["modules",{"_index":42,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb://mongodb:27017/unbored",{"_index":288,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongoose",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{},"classes/User.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{}}}],["mongoosemodule.forfeature",{"_index":430,"title":{},"body":{"modules/EventModule.html":{}}}],["mongoosemodule.forfeature([{name",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":285,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["more",{"_index":989,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":995,"title":{},"body":{"index.html":{}}}],["name",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{}}}],["nest",{"_index":953,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":999,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtStrategy.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{},"classes/User.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":374,"title":{},"body":{"controllers/EventController.html":{},"dependencies.html":{}}}],["new",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newgroup",{"_index":648,"title":{},"body":{"injectables/GroupService.html":{}}}],["newid",{"_index":497,"title":{},"body":{"injectables/EventService.html":{}}}],["newinvitations",{"_index":656,"title":{},"body":{"injectables/GroupService.html":{}}}],["newmessage",{"_index":679,"title":{},"body":{"injectables/GroupService.html":{}}}],["node.js",{"_index":945,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":465,"title":{},"body":{"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{}}}],["notfoundexception(\"could",{"_index":487,"title":{},"body":{"injectables/EventService.html":{},"injectables/GroupService.html":{}}}],["notfoundexception(\"group",{"_index":643,"title":{},"body":{"injectables/GroupService.html":{}}}],["notfoundexception(\"invalid",{"_index":482,"title":{},"body":{"injectables/EventService.html":{}}}],["notfoundexception('could",{"_index":516,"title":{},"body":{"injectables/EventService.html":{}}}],["notfoundexception('event",{"_index":493,"title":{},"body":{"injectables/EventService.html":{}}}],["notfoundexception('invalid",{"_index":480,"title":{},"body":{"injectables/EventService.html":{},"injectables/ProfileService.html":{}}}],["npm",{"_index":958,"title":{},"body":{"index.html":{}}}],["number",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{}}}],["oauth2client",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["oauth2client('134575829737",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":806,"title":{},"body":{"injectables/ProfileService.html":{},"classes/User.html":{}}}],["open",{"_index":978,"title":{},"body":{"index.html":{}}}],["optional",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["out",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["overview",{"_index":1006,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":910,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pants",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateAvatarDto.html":{},"classes/User.html":{}}}],["param",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["parameters",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["parsefilepipe",{"_index":361,"title":{},"body":{"controllers/EventController.html":{}}}],["passport",{"_index":702,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register({defaultstrategy",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":699,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["passportstrategy(strategy",{"_index":703,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["password",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{}}}],["password\").select",{"_index":710,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["password').select",{"_index":798,"title":{},"body":{"injectables/ProfileService.html":{}}}],["passwordcheck",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload",{"_index":698,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["pictureforevent",{"_index":524,"title":{},"body":{"injectables/EventService.html":{}}}],["pictureforuser",{"_index":522,"title":{},"body":{"injectables/EventService.html":{}}}],["pictures",{"_index":525,"title":{},"body":{"injectables/EventService.html":{},"classes/Events.html":{},"classes/User.html":{}}}],["please",{"_index":714,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"index.html":{}}}],["png|jpg|jpeg",{"_index":414,"title":{},"body":{"controllers/EventController.html":{}}}],["post",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["post('/accept",{"_index":605,"title":{},"body":{"controllers/GroupController.html":{}}}],["post('/add",{"_index":381,"title":{},"body":{"controllers/EventController.html":{}}}],["post('/avatar",{"_index":769,"title":{},"body":{"controllers/ProfileController.html":{}}}],["post('/create",{"_index":598,"title":{},"body":{"controllers/GroupController.html":{}}}],["post('/createevent",{"_index":390,"title":{},"body":{"controllers/EventController.html":{}}}],["post('/invite",{"_index":601,"title":{},"body":{"controllers/GroupController.html":{}}}],["post('/login",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login/google",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/message",{"_index":610,"title":{},"body":{"controllers/GroupController.html":{}}}],["post('/rateevent",{"_index":399,"title":{},"body":{"controllers/EventController.html":{}}}],["post('/refresh",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/upload",{"_index":406,"title":{},"body":{"controllers/EventController.html":{}}}],["posted",{"_index":683,"title":{},"body":{"injectables/GroupService.html":{}}}],["preferences",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/User.html":{}}}],["prefix",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["private",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["production",{"_index":967,"title":{},"body":{"index.html":{}}}],["profile",{"_index":725,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["profile(@req",{"_index":756,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profile(req",{"_index":744,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profile(user",{"_index":786,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profile.controller",{"_index":775,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.service",{"_index":754,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile/profile.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["profilecontroller",{"_index":723,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profilemodule",{"_index":56,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profileservice",{"_index":753,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["profilid",{"_index":785,"title":{},"body":{"injectables/ProfileService.html":{}}}],["progressive",{"_index":944,"title":{},"body":{"index.html":{}}}],["project",{"_index":979,"title":{},"body":{"index.html":{}}}],["promise",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["prop",{"_index":533,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"classes/User.html":{}}}],["prop({type",{"_index":861,"title":{},"body":{"classes/User.html":{}}}],["prop({unique",{"_index":536,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"classes/User.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/AddEventDto.html":{},"classes/DeleteEventDto.html":{},"classes/Events.html":{},"classes/Groups.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"properties.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["propriety",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["pull",{"_index":477,"title":{},"body":{"injectables/EventService.html":{},"injectables/GroupService.html":{}}}],["put",{"_index":357,"title":{},"body":{"controllers/EventController.html":{},"controllers/ProfileController.html":{}}}],["put('/editevent",{"_index":396,"title":{},"body":{"controllers/EventController.html":{}}}],["put('/update",{"_index":760,"title":{},"body":{"controllers/ProfileController.html":{}}}],["query",{"_index":356,"title":{},"body":{"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["query('id",{"_index":411,"title":{},"body":{"controllers/EventController.html":{}}}],["query('user_id",{"_index":603,"title":{},"body":{"controllers/GroupController.html":{}}}],["rate",{"_index":507,"title":{},"body":{"injectables/EventService.html":{},"classes/Events.html":{}}}],["rate.idrate.tostring",{"_index":514,"title":{},"body":{"injectables/EventService.html":{}}}],["rateevent",{"_index":499,"title":{},"body":{"injectables/EventService.html":{}}}],["rateeventdto",{"_index":324,"title":{"classes/rateEventDto.html":{}},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"coverage.html":{},"classes/rateEventDto.html":{}}}],["rateeventdto.comments",{"_index":503,"title":{},"body":{"injectables/EventService.html":{}}}],["rateeventdto.stars",{"_index":501,"title":{},"body":{"injectables/EventService.html":{}}}],["rateeventforuser",{"_index":504,"title":{},"body":{"injectables/EventService.html":{}}}],["rateid",{"_index":1016,"title":{},"body":{"classes/removeEventRateDto.html":{}}}],["rates",{"_index":508,"title":{},"body":{"injectables/EventService.html":{},"classes/User.html":{}}}],["read",{"_index":988,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":9,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["reflect",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshStrategy.html":{}}}],["refresh(@req",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(req",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(user",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshguard",{"_index":140,"title":{"injectables/RefreshGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshGuard.html":{},"coverage.html":{}}}],["refreshstrategy",{"_index":158,"title":{"injectables/RefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["refreshtoken",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerdto",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":125,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["rejected",{"_index":673,"title":{},"body":{"injectables/GroupService.html":{}}}],["removeevent",{"_index":436,"title":{},"body":{"injectables/EventService.html":{}}}],["removeevent(userid",{"_index":457,"title":{},"body":{"injectables/EventService.html":{}}}],["removeeventratedto",{"_index":341,"title":{"classes/removeEventRateDto.html":{}},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{},"coverage.html":{},"classes/removeEventRateDto.html":{}}}],["removeeventratedto.rateid.tostring",{"_index":515,"title":{},"body":{"injectables/EventService.html":{}}}],["removeunboredeventrate",{"_index":312,"title":{},"body":{"controllers/EventController.html":{}}}],["removeunboredeventrate(@req",{"_index":404,"title":{},"body":{"controllers/EventController.html":{}}}],["removeunboredeventrate(req",{"_index":340,"title":{},"body":{"controllers/EventController.html":{}}}],["repository",{"_index":956,"title":{},"body":{"index.html":{}}}],["req",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["req.user.id",{"_index":402,"title":{},"body":{"controllers/EventController.html":{}}}],["request",{"_index":422,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["require('fs",{"_index":419,"title":{},"body":{"controllers/EventController.html":{}}}],["required",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["reservations",{"_index":468,"title":{},"body":{"injectables/EventService.html":{},"classes/User.html":{}}}],["reset",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}],["results",{"_index":24,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"coverage.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"dependencies.html":{},"classes/editEventDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["returns",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["role",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["role.user",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["route",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":962,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":949,"title":{},"body":{"index.html":{}}}],["schema",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventModule.html":{},"classes/Events.html":{},"modules/GroupModule.html":{},"classes/Groups.html":{},"modules/ProfileModule.html":{},"classes/User.html":{}}}],["schema({versionkey",{"_index":543,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"classes/User.html":{}}}],["schemafactory",{"_index":542,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(events",{"_index":548,"title":{},"body":{"classes/Events.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(groups",{"_index":689,"title":{},"body":{"classes/Groups.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":871,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/events.schema",{"_index":371,"title":{},"body":{"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{}}}],["schemas/group.schema",{"_index":589,"title":{},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{}}}],["schemas/user.schema",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{}}}],["secret",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["secret:'123456",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":708,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["see",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["send",{"_index":678,"title":{},"body":{"injectables/GroupService.html":{}}}],["sendat",{"_index":680,"title":{},"body":{"injectables/GroupService.html":{},"classes/Groups.html":{}}}],["sended",{"_index":663,"title":{},"body":{"injectables/GroupService.html":{}}}],["sendmessage",{"_index":556,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["sendmessage(@query('group_id",{"_index":611,"title":{},"body":{"controllers/GroupController.html":{}}}],["sendmessage(id",{"_index":572,"title":{},"body":{"controllers/GroupController.html":{}}}],["sendmessage(user",{"_index":631,"title":{},"body":{"injectables/GroupService.html":{}}}],["sendmessagedto",{"_index":573,"title":{"classes/sendMessageDto.html":{}},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{},"coverage.html":{},"classes/sendMessageDto.html":{}}}],["server",{"_index":950,"title":{},"body":{"index.html":{}}}],["set",{"_index":810,"title":{},"body":{"injectables/ProfileService.html":{}}}],["shoes",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"classes/UpdateAvatarDto.html":{},"classes/User.html":{}}}],["showdetails",{"_index":313,"title":{},"body":{"controllers/EventController.html":{}}}],["showdetails(@query('id",{"_index":388,"title":{},"body":{"controllers/EventController.html":{}}}],["showdetails(id",{"_index":344,"title":{},"body":{"controllers/EventController.html":{}}}],["showevent",{"_index":314,"title":{},"body":{"controllers/EventController.html":{},"injectables/EventService.html":{}}}],["showevent(@req",{"_index":377,"title":{},"body":{"controllers/EventController.html":{}}}],["showevent(req",{"_index":347,"title":{},"body":{"controllers/EventController.html":{}}}],["showevent(user",{"_index":459,"title":{},"body":{"injectables/EventService.html":{}}}],["showgroup",{"_index":557,"title":{},"body":{"controllers/GroupController.html":{}}}],["showgroup(@req",{"_index":591,"title":{},"body":{"controllers/GroupController.html":{}}}],["showgroup(req",{"_index":576,"title":{},"body":{"controllers/GroupController.html":{}}}],["showgroups",{"_index":619,"title":{},"body":{"injectables/GroupService.html":{}}}],["showgroups(user",{"_index":634,"title":{},"body":{"injectables/GroupService.html":{}}}],["showgroupwithid",{"_index":558,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["showgroupwithid(@query('group_id",{"_index":593,"title":{},"body":{"controllers/GroupController.html":{}}}],["showgroupwithid(id",{"_index":578,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["showinvitation",{"_index":559,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["showinvitation(@req",{"_index":596,"title":{},"body":{"controllers/GroupController.html":{}}}],["showinvitation(req",{"_index":580,"title":{},"body":{"controllers/GroupController.html":{}}}],["showinvitation(user",{"_index":637,"title":{},"body":{"injectables/GroupService.html":{}}}],["side",{"_index":951,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshGuard.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"index.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["sponsors",{"_index":982,"title":{},"body":{"index.html":{}}}],["src/.../auth.service.ts",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../events.schema.ts",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../group.schema.ts",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":941,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.schema.ts",{"_index":938,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:28",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:42",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:47",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts:15",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:67",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:88",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:92",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":712,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":719,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:6",{"_index":717,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":819,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:11",{"_index":822,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:15",{"_index":824,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:19",{"_index":825,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:23",{"_index":826,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:27",{"_index":821,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:31",{"_index":828,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:7",{"_index":829,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/guards/jwt",{"_index":583,"title":{},"body":{"controllers/GroupController.html":{},"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/guards/refresh",{"_index":813,"title":{},"body":{"injectables/RefreshGuard.html":{},"coverage.html":{}}}],["src/auth/schemas/user.schema",{"_index":639,"title":{},"body":{"injectables/GroupService.html":{},"controllers/ProfileController.html":{}}}],["src/auth/schemas/user.schema.ts",{"_index":848,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/auth/schemas/user.schema.ts:19",{"_index":864,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:22",{"_index":850,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:25",{"_index":855,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:28",{"_index":860,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:31",{"_index":854,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:34",{"_index":851,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:37",{"_index":849,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:40",{"_index":857,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:43",{"_index":859,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:46",{"_index":862,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:54",{"_index":863,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:62",{"_index":858,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:70",{"_index":856,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:76",{"_index":852,"title":{},"body":{"classes/User.html":{}}}],["src/auth/schemas/user.schema.ts:82",{"_index":853,"title":{},"body":{"classes/User.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":693,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:21",{"_index":697,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:9",{"_index":695,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/refresh.strategy.ts",{"_index":815,"title":{},"body":{"injectables/RefreshStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/refresh.strategy.ts:21",{"_index":817,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["src/auth/strategies/refresh.strategy.ts:9",{"_index":816,"title":{},"body":{"injectables/RefreshStrategy.html":{}}}],["src/database/database.module.ts",{"_index":274,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.module.ts:8",{"_index":278,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.service.ts",{"_index":290,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/database/database.service.ts:6",{"_index":294,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/database/database.service.ts:8",{"_index":295,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/event/dto/addevent.dto.ts",{"_index":6,"title":{},"body":{"classes/AddEventDto.html":{},"coverage.html":{}}}],["src/event/dto/addevent.dto.ts:6",{"_index":17,"title":{},"body":{"classes/AddEventDto.html":{}}}],["src/event/dto/createevent.dto.ts",{"_index":889,"title":{},"body":{"coverage.html":{},"classes/createEventDto.html":{}}}],["src/event/dto/createevent.dto.ts:10",{"_index":906,"title":{},"body":{"classes/createEventDto.html":{}}}],["src/event/dto/createevent.dto.ts:14",{"_index":907,"title":{},"body":{"classes/createEventDto.html":{}}}],["src/event/dto/createevent.dto.ts:6",{"_index":908,"title":{},"body":{"classes/createEventDto.html":{}}}],["src/event/dto/deleteeventrate.dto.ts",{"_index":891,"title":{},"body":{"coverage.html":{},"classes/removeEventRateDto.html":{}}}],["src/event/dto/deleteeventrate.dto.ts:6",{"_index":1018,"title":{},"body":{"classes/removeEventRateDto.html":{}}}],["src/event/dto/editevent.dto.ts",{"_index":892,"title":{},"body":{"coverage.html":{},"classes/editEventDto.html":{}}}],["src/event/dto/editevent.dto.ts:12",{"_index":932,"title":{},"body":{"classes/editEventDto.html":{}}}],["src/event/dto/editevent.dto.ts:17",{"_index":934,"title":{},"body":{"classes/editEventDto.html":{}}}],["src/event/dto/editevent.dto.ts:7",{"_index":935,"title":{},"body":{"classes/editEventDto.html":{}}}],["src/event/dto/rateevent.dto.ts",{"_index":893,"title":{},"body":{"coverage.html":{},"classes/rateEventDto.html":{}}}],["src/event/dto/rateevent.dto.ts:11",{"_index":1014,"title":{},"body":{"classes/rateEventDto.html":{}}}],["src/event/dto/rateevent.dto.ts:6",{"_index":1015,"title":{},"body":{"classes/rateEventDto.html":{}}}],["src/event/dto/removeevent.dto.ts",{"_index":300,"title":{},"body":{"classes/DeleteEventDto.html":{},"coverage.html":{}}}],["src/event/dto/removeevent.dto.ts:6",{"_index":301,"title":{},"body":{"classes/DeleteEventDto.html":{}}}],["src/event/event.controller.ts",{"_index":303,"title":{},"body":{"controllers/EventController.html":{},"coverage.html":{}}}],["src/event/event.controller.ts:20",{"_index":349,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:26",{"_index":339,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:32",{"_index":318,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:38",{"_index":330,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:44",{"_index":346,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:50",{"_index":322,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:56",{"_index":333,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:62",{"_index":337,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:68",{"_index":326,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:74",{"_index":343,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.controller.ts:81",{"_index":353,"title":{},"body":{"controllers/EventController.html":{}}}],["src/event/event.module.ts",{"_index":425,"title":{},"body":{"modules/EventModule.html":{}}}],["src/event/event.service.ts",{"_index":431,"title":{},"body":{"injectables/EventService.html":{},"coverage.html":{}}}],["src/event/event.service.ts:123",{"_index":451,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:136",{"_index":462,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:16",{"_index":439,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:24",{"_index":460,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:28",{"_index":456,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:33",{"_index":441,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:38",{"_index":458,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:43",{"_index":455,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:54",{"_index":447,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:70",{"_index":449,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:82",{"_index":453,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/event.service.ts:99",{"_index":444,"title":{},"body":{"injectables/EventService.html":{}}}],["src/event/schemas/events.schema.ts",{"_index":530,"title":{},"body":{"classes/Events.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/event/schemas/events.schema.ts:10",{"_index":534,"title":{},"body":{"classes/Events.html":{}}}],["src/event/schemas/events.schema.ts:13",{"_index":541,"title":{},"body":{"classes/Events.html":{}}}],["src/event/schemas/events.schema.ts:20",{"_index":540,"title":{},"body":{"classes/Events.html":{}}}],["src/event/schemas/events.schema.ts:26",{"_index":535,"title":{},"body":{"classes/Events.html":{}}}],["src/event/schemas/events.schema.ts:7",{"_index":538,"title":{},"body":{"classes/Events.html":{}}}],["src/group/dto/creategroup.dto.ts",{"_index":897,"title":{},"body":{"coverage.html":{},"classes/createGroupDto.html":{}}}],["src/group/dto/creategroup.dto.ts:6",{"_index":909,"title":{},"body":{"classes/createGroupDto.html":{}}}],["src/group/dto/sendmessage.dto.ts",{"_index":898,"title":{},"body":{"coverage.html":{},"classes/sendMessageDto.html":{}}}],["src/group/dto/sendmessage.dto.ts:6",{"_index":1019,"title":{},"body":{"classes/sendMessageDto.html":{}}}],["src/group/group.controller.ts",{"_index":550,"title":{},"body":{"controllers/GroupController.html":{},"coverage.html":{}}}],["src/group/group.controller.ts:14",{"_index":577,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:20",{"_index":579,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:26",{"_index":582,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:32",{"_index":566,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:38",{"_index":571,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:44",{"_index":562,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:50",{"_index":568,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.controller.ts:56",{"_index":575,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/group/group.module.ts",{"_index":615,"title":{},"body":{"modules/GroupModule.html":{}}}],["src/group/group.service.ts",{"_index":618,"title":{},"body":{"injectables/GroupService.html":{},"coverage.html":{}}}],["src/group/group.service.ts:104",{"_index":633,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:11",{"_index":621,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:19",{"_index":635,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:23",{"_index":636,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:30",{"_index":638,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:34",{"_index":626,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:54",{"_index":630,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:77",{"_index":624,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:94",{"_index":628,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/schemas/group.schema.ts",{"_index":684,"title":{},"body":{"classes/Groups.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/group/schemas/group.schema.ts:10",{"_index":685,"title":{},"body":{"classes/Groups.html":{}}}],["src/group/schemas/group.schema.ts:13",{"_index":686,"title":{},"body":{"classes/Groups.html":{}}}],["src/group/schemas/group.schema.ts:16",{"_index":687,"title":{},"body":{"classes/Groups.html":{}}}],["src/group/schemas/group.schema.ts:7",{"_index":688,"title":{},"body":{"classes/Groups.html":{}}}],["src/main.ts",{"_index":902,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/profile/dto/update.dto.ts",{"_index":836,"title":{},"body":{"classes/UpdateDto.html":{},"coverage.html":{}}}],["src/profile/dto/update.dto.ts:11",{"_index":840,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/profile/dto/update.dto.ts:14",{"_index":846,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/profile/dto/update.dto.ts:18",{"_index":842,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/profile/dto/update.dto.ts:22",{"_index":844,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/profile/dto/update.dto.ts:26",{"_index":845,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/profile/dto/update.dto.ts:30",{"_index":838,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/profile/dto/update.dto.ts:7",{"_index":847,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/profile/dto/updateavatar.dto.ts",{"_index":834,"title":{},"body":{"classes/UpdateAvatarDto.html":{},"coverage.html":{}}}],["src/profile/dto/updateavatar.dto.ts:5",{"_index":835,"title":{},"body":{"classes/UpdateAvatarDto.html":{}}}],["src/profile/profile.controller.ts",{"_index":724,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/profile/profile.controller.ts:16",{"_index":745,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:22",{"_index":743,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:28",{"_index":750,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:34",{"_index":733,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:40",{"_index":736,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:46",{"_index":740,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.module.ts",{"_index":774,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/profile/profile.service.ts",{"_index":777,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/profile/profile.service.ts:11",{"_index":780,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:16",{"_index":787,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:20",{"_index":784,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:27",{"_index":789,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:41",{"_index":791,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:45",{"_index":793,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:49",{"_index":782,"title":{},"body":{"injectables/ProfileService.html":{}}}],["stars",{"_index":500,"title":{},"body":{"injectables/EventService.html":{},"classes/Events.html":{},"classes/User.html":{},"classes/rateEventDto.html":{}}}],["start",{"_index":963,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":966,"title":{},"body":{"index.html":{}}}],["start:doctest",{"_index":970,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":968,"title":{},"body":{"index.html":{}}}],["started",{"_index":943,"title":{"index.html":{}},"body":{}}],["starter",{"_index":955,"title":{},"body":{"index.html":{}}}],["statements",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":275,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["status",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{}}}],["stay",{"_index":991,"title":{},"body":{"index.html":{}}}],["store",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["stores",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["strategies/jwt.strategy",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/refresh.strategy",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":700,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["string",{"_index":13,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DeleteEventDto.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"classes/LoginDto.html":{},"injectables/ProfileService.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["style",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"classes/UpdateAvatarDto.html":{},"classes/User.html":{}}}],["succefully",{"_index":490,"title":{},"body":{"injectables/EventService.html":{}}}],["succesfully",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["successfully",{"_index":662,"title":{},"body":{"injectables/GroupService.html":{}}}],["successsfully",{"_index":672,"title":{},"body":{"injectables/GroupService.html":{}}}],["super",{"_index":704,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["support",{"_index":983,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1002,"title":{},"body":{"modules.html":{}}}],["table",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":287,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/EventService.html":{},"index.html":{}}}],["test:covsupport",{"_index":975,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":974,"title":{},"body":{"index.html":{}}}],["tests",{"_index":972,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":981,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.googlelogin(body?.googletokenid",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(logindto",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(req.user",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.connection",{"_index":298,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.eventmodel.create",{"_index":485,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventmodel.deleteone({_id",{"_index":489,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventmodel.find",{"_index":470,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventmodel.findbyid(eventid",{"_index":481,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventmodel.findbyidandupdate(eventid",{"_index":495,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventmodel.findoneandupdate({_id",{"_index":519,"title":{},"body":{"injectables/EventService.html":{}}}],["this.eventservice.addevent(req.user.id",{"_index":383,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.addunboredrateevent(id",{"_index":401,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.createunboredevent(createeventdto",{"_index":392,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.deleteunboredevent(id",{"_index":395,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.deleteunboredrate(req.user.id",{"_index":405,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.editunboredevent(editeventdto",{"_index":398,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.geteventbyid(id",{"_index":389,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.listallevent",{"_index":380,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.removeevent(req.user.id",{"_index":386,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.showevent(req.user",{"_index":378,"title":{},"body":{"controllers/EventController.html":{}}}],["this.eventservice.uploadunboredimage(req.user.id",{"_index":416,"title":{},"body":{"controllers/EventController.html":{}}}],["this.groupmodel.create",{"_index":646,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyid(groupdid",{"_index":674,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyid(groupid",{"_index":653,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyid(id",{"_index":642,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyidandupdate(groupdid",{"_index":681,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupmodel.findbyidandupdate(groupid",{"_index":665,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.groupservice.acceptinvitation(req.user",{"_index":607,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.creategroup(req.user",{"_index":600,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.deleteinvitation(req.user",{"_index":609,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.inviteingroup(id",{"_index":604,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.sendmessage(req.user",{"_index":612,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.showgroups(req.user",{"_index":592,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.showgroupwithid(id",{"_index":594,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.showinvitation(req.user",{"_index":597,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.jwtservice.sign({id",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.profileservice.changeavatar(req.user.id",{"_index":771,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.getprofilebyid(id",{"_index":759,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.profile(req.user",{"_index":757,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.updateuser(req.user.id",{"_index":762,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.useractualavatar(req.user",{"_index":765,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.useravatars(req.user",{"_index":768,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.usermodel.create",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findbyid(id).select",{"_index":709,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["this.usermodel.findbyid(profilid).select",{"_index":797,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":511,"title":{},"body":{"injectables/EventService.html":{},"injectables/GroupService.html":{}}}],["this.usermodel.findbyidandupdate(id",{"_index":802,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.usermodel.findbyidandupdate(user._id",{"_index":667,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.usermodel.findbyidandupdate(userid",{"_index":472,"title":{},"body":{"injectables/EventService.html":{}}}],["this.usermodel.findone",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findone({_id",{"_index":669,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.usermodel.findone({email",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findoneandupdate({_id",{"_index":518,"title":{},"body":{"injectables/EventService.html":{},"injectables/GroupService.html":{}}}],["throw",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{}}}],["ticket",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["ticket.getpayload()?.email",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["ticket.getpayload()?.name",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["token",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokenid",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":992,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["translated",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["true",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/ProfileService.html":{},"classes/User.html":{}}}],["true}).select",{"_index":803,"title":{},"body":{"injectables/ProfileService.html":{}}}],["try",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/ProfileService.html":{}}}],["twitter",{"_index":998,"title":{},"body":{"index.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AddEventDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"classes/DeleteEventDto.html":{},"controllers/EventController.html":{},"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"classes/Groups.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{},"coverage.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["types",{"_index":464,"title":{},"body":{"injectables/EventService.html":{},"injectables/ProfileService.html":{}}}],["types.objectid",{"_index":498,"title":{},"body":{"injectables/EventService.html":{}}}],["types.objectid(removeeventratedto.rateid",{"_index":517,"title":{},"body":{"injectables/EventService.html":{}}}],["types.objectid.isvalid(eventid",{"_index":479,"title":{},"body":{"injectables/EventService.html":{}}}],["types.objectid.isvalid(profilid",{"_index":795,"title":{},"body":{"injectables/ProfileService.html":{}}}],["types/multer",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":954,"title":{},"body":{"index.html":{}}}],["ukmecg47kp10fpg20po5bo5h6k6r30uo.apps.googleusercontent.com",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["unauthorizedexception(\"invalid",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('role",{"_index":800,"title":{},"body":{"injectables/ProfileService.html":{}}}],["undefined",{"_index":537,"title":{},"body":{"classes/Events.html":{},"classes/Groups.html":{},"classes/User.html":{}}}],["unit",{"_index":971,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":354,"title":{},"body":{"controllers/EventController.html":{},"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["unlicensed",{"_index":1012,"title":{},"body":{"properties.html":{}}}],["unlockedstyle",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["unlockedstyles",{"_index":807,"title":{},"body":{"injectables/ProfileService.html":{}}}],["update",{"_index":730,"title":{},"body":{"controllers/ProfileController.html":{}}}],["update(@req",{"_index":761,"title":{},"body":{"controllers/ProfileController.html":{}}}],["update(req",{"_index":746,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updateavatardto",{"_index":738,"title":{"classes/UpdateAvatarDto.html":{}},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateAvatarDto.html":{},"coverage.html":{}}}],["updatedto",{"_index":748,"title":{"classes/UpdateDto.html":{}},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["updateduser",{"_index":471,"title":{},"body":{"injectables/EventService.html":{},"injectables/ProfileService.html":{}}}],["updateduser.reservations",{"_index":476,"title":{},"body":{"injectables/EventService.html":{}}}],["updaterate",{"_index":506,"title":{},"body":{"injectables/EventService.html":{}}}],["updateuser",{"_index":747,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["updateuser(id",{"_index":788,"title":{},"body":{"injectables/ProfileService.html":{}}}],["updateuser.role",{"_index":799,"title":{},"body":{"injectables/ProfileService.html":{}}}],["uploaded",{"_index":527,"title":{},"body":{"injectables/EventService.html":{}}}],["uploadedfile",{"_index":359,"title":{},"body":{"controllers/EventController.html":{}}}],["uploadunboredimage",{"_index":437,"title":{},"body":{"injectables/EventService.html":{}}}],["uploadunboredimage(userid",{"_index":461,"title":{},"body":{"injectables/EventService.html":{}}}],["uploadunboredimages",{"_index":315,"title":{},"body":{"controllers/EventController.html":{}}}],["uploadunboredimages(@req",{"_index":410,"title":{},"body":{"controllers/EventController.html":{}}}],["uploadunboredimages(req",{"_index":350,"title":{},"body":{"controllers/EventController.html":{}}}],["uri",{"_index":279,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["used",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProfileService.html":{},"classes/User.html":{}}}],["usefactory",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["useguards",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["useguards(jwtguard",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["useguards(jwtguard)@delete('/delete",{"_index":329,"title":{},"body":{"controllers/EventController.html":{},"controllers/GroupController.html":{}}}],["useguards(jwtguard)@delete('/deleteevent",{"_index":332,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtguard)@delete('/removerate",{"_index":342,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtguard)@get",{"_index":348,"title":{},"body":{"controllers/EventController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["useguards(jwtguard)@get('/avatar",{"_index":732,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtguard)@get('/avatars",{"_index":735,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtguard)@get('/invitations",{"_index":581,"title":{},"body":{"controllers/GroupController.html":{}}}],["useguards(jwtguard)@get('/lists",{"_index":338,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtguard)@get('/show",{"_index":345,"title":{},"body":{"controllers/EventController.html":{},"controllers/GroupController.html":{}}}],["useguards(jwtguard)@post",{"_index":742,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtguard)@post('/accept",{"_index":561,"title":{},"body":{"controllers/GroupController.html":{}}}],["useguards(jwtguard)@post('/add",{"_index":317,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtguard)@post('/avatar",{"_index":739,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(jwtguard)@post('/create",{"_index":565,"title":{},"body":{"controllers/GroupController.html":{}}}],["useguards(jwtguard)@post('/createevent",{"_index":321,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtguard)@post('/invite",{"_index":570,"title":{},"body":{"controllers/GroupController.html":{}}}],["useguards(jwtguard)@post('/message",{"_index":574,"title":{},"body":{"controllers/GroupController.html":{}}}],["useguards(jwtguard)@post('/rateevent",{"_index":325,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtguard)@post('/upload')@useinterceptors(undefined",{"_index":352,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtguard)@put('/editevent",{"_index":336,"title":{},"body":{"controllers/EventController.html":{}}}],["useguards(jwtguard)@put('/update",{"_index":749,"title":{},"body":{"controllers/ProfileController.html":{}}}],["useguards(refreshguard",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshguard)@useguards(jwtguard)@post('/refresh",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":358,"title":{},"body":{"controllers/EventController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":407,"title":{},"body":{"controllers/EventController.html":{}}}],["user",{"_index":118,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EventModule.html":{},"injectables/EventService.html":{},"modules/GroupModule.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user._id",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["user.groups",{"_index":641,"title":{},"body":{"injectables/GroupService.html":{}}}],["user.groups.some((groups",{"_index":675,"title":{},"body":{"injectables/GroupService.html":{}}}],["user.id",{"_index":670,"title":{},"body":{"injectables/GroupService.html":{}}}],["user.invitations",{"_index":645,"title":{},"body":{"injectables/GroupService.html":{}}}],["user.invitations.some((invitations",{"_index":654,"title":{},"body":{"injectables/GroupService.html":{}}}],["user.password",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.rates",{"_index":521,"title":{},"body":{"injectables/EventService.html":{}}}],["user.reservations",{"_index":469,"title":{},"body":{"injectables/EventService.html":{}}}],["user.role",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.style",{"_index":805,"title":{},"body":{"injectables/ProfileService.html":{}}}],["user.unlockedstyle",{"_index":808,"title":{},"body":{"injectables/ProfileService.html":{}}}],["useractualavatar",{"_index":778,"title":{},"body":{"injectables/ProfileService.html":{}}}],["useractualavatar(user",{"_index":790,"title":{},"body":{"injectables/ProfileService.html":{}}}],["useravatars",{"_index":779,"title":{},"body":{"injectables/ProfileService.html":{}}}],["useravatars(user",{"_index":792,"title":{},"body":{"injectables/ProfileService.html":{}}}],["userid",{"_index":442,"title":{},"body":{"injectables/EventService.html":{},"classes/Events.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["usermodel",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EventService.html":{},"injectables/GroupService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProfileService.html":{},"injectables/RefreshStrategy.html":{}}}],["username",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/User.html":{}}}],["userschema",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.index({'invitations.createdat",{"_index":872,"title":{},"body":{"classes/User.html":{}}}],["validate",{"_index":694,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["validate(payload",{"_index":696,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RefreshStrategy.html":{}}}],["validator",{"_index":21,"title":{},"body":{"classes/AddEventDto.html":{},"classes/DeleteEventDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAvatarDto.html":{},"classes/UpdateDto.html":{},"classes/createEventDto.html":{},"classes/createGroupDto.html":{},"dependencies.html":{},"classes/editEventDto.html":{},"classes/rateEventDto.html":{},"classes/removeEventRateDto.html":{},"classes/sendMessageDto.html":{}}}],["validators",{"_index":412,"title":{},"body":{"controllers/EventController.html":{}}}],["value",{"_index":939,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1020,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1010,"title":{},"body":{"properties.html":{}}}],["want",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["watch",{"_index":964,"title":{},"body":{"index.html":{}}}],["website",{"_index":996,"title":{},"body":{"index.html":{}}}],["world",{"_index":79,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":280,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["you'd",{"_index":986,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddEventDto.html":{"url":"classes/AddEventDto.html","title":"class - AddEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/AddEvent.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                events\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        events\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayMinSize(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/AddEvent.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, ArrayMinSize } from \"class-validator\";\n\nexport class AddEventDto {\n    @IsArray()\n    @ArrayMinSize(1)\n    readonly events: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nGroupModule\n\nGroupModule\n\nAppModule -->\n\nGroupModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EventModule\n                        \n                        \n                            GroupModule\n                        \n                        \n                            ProfileModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { EventModule } from './event/event.module';\nimport { DatabaseModule } from './database/database.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { GroupModule } from './group/group.module';\n\n\n@Module({\n  imports: [AuthModule, ProfileModule, EventModule, GroupModule, DatabaseModule.forRoot(\"\"), ConfigModule.forRoot({ isGlobal: true})],\n  controllers: [AppController],\n  providers: [AppService],\n})\n\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                login\n                            \n                            \n                                    \n                                loginGoogle\n                            \n                            \n                                    \n                                    \n                                    \n                                refresh\n                            \n                            \n                                    \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:28\n                \n            \n\n\n            \n                \n                    Method for '/login' route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        See the definition of the loginDto file to see the list of required propriety\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Return a promise with the HTTP status an AuthToken and a RefreshToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        loginGoogle\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginGoogle(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login/google')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(req, head)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshGuard)@UseGuards(JwtGuard)@Post('/refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:42\n                \n            \n\n\n            \n                \n                    Method for '/refresh' route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        req stores an user translated by JwtStrategy\n\n                                    \n                                \n                                \n                                    head\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        head has to store a refresh token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Return a promise with the HTTP status and a new AuthToken and the RefreshToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n                    Method for '/register' route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    registerDto\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        See the definition of the registerDto file to see the list of required propriety\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Return a promise with the HTTP status and a message\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Headers, Body, Req, UseGuards, HttpStatus } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtGuard } from './guards/jwt-auth.guard';\nimport { RefreshGuard } from './guards/refresh-auth.guard';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private authService: AuthService) {}\n\n    /**\n     * Method for '/register' route\n     * @param registerDto See the definition of the registerDto file to see the list of required propriety\n     * @returns Return a promise with the HTTP status and a message\n     */\n    @Post('/register')\n    register(@Body() registerDto: RegisterDto) : Promise {\n        return this.authService.register(registerDto)\n    }\n\n    /**\n     * Method for '/login' route\n     * @param loginDto See the definition of the loginDto file to see the list of required propriety\n     * @returns Return a promise with the HTTP status an AuthToken and a RefreshToken\n     */\n    @Post('/login')\n    login(@Body() loginDto: LoginDto) : Promise {\n        return this.authService.login(loginDto);\n    }\n\n    /**\n     * Method for '/refresh' route\n     * @param req req stores an user translated by JwtStrategy\n     * @param head head has to store a refresh token\n     * @returns Return a promise with the HTTP status and a new AuthToken and the RefreshToken\n     */\n\n    @UseGuards(RefreshGuard)\n    @UseGuards(JwtGuard)\n    @Post('/refresh')\n    refresh(@Req() req, @Headers() head) : Promise {\n        return this.authService.refresh(req.user, head.refresh);\n    }\n\n    @Post('/login/google')\n    loginGoogle(@Body() body) : Promise {\n        return this.authService.googleLogin(body?.googleTokenId);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nRefreshStrategy\n\nRefreshStrategy\n\nAuthModule -->\n\nRefreshStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            RefreshStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserSchema } from './schemas/user.schema';\nimport { RefreshStrategy } from './strategies/refresh.strategy';\nimport { DatabaseModule } from '../database/database.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n    imports: [\n        PassportModule.register({defaultStrategy: 'jwt'}),\n        JwtModule.registerAsync({\n            useFactory: () => {\n                return {\n                    secret: \"123456\",\n                    signOptions: {\n                        expiresIn: \"3d\"\n                    },\n                };\n            }\n        }),\n        MongooseModule.forFeature([{name: 'User', schema: UserSchema}]),\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, JwtStrategy, RefreshStrategy],\n})\n\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                googleLogin\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleLogin(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:67\n                \n            \n\n\n            \n                \n                    Function used by the method \"login\" in AuthController to login an user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        See the definition of the loginDto file to see the list of required propriety\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Return a promise with the HTTP status an AuthToken and a RefreshToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(user: User, actualRefresh: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:88\n                \n            \n\n\n            \n                \n                    Function user by the method \"refresh\" in AuthController to refresh AuthToken\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User is the current user who want to refresh his token\n\n                                    \n                                \n                                \n                                    actualRefresh\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Return a promise with the HTTP status and a new AuthToken and the RefreshToken\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n                    Function used by the method \"register\" in AuthController to store new user to the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    registerDto\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        See the definition of the registerDto file to see the list of required propriety\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Return a promise with the HTTP status and a message\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, UnauthorizedException} from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport { Role, User } from \"./schemas/user.schema\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport * as bcrypt from 'bcryptjs'\nimport { RegisterDto } from \"./dto/register.dto\";\nimport { LoginDto } from \"./dto/login.dto\";\nimport { HttpStatus } from \"@nestjs/common\";\nimport { OAuth2Client } from 'google-auth-library';\n\nconst client = new OAuth2Client('134575829737-ukmecg47kp10fpg20po5bo5h6k6r30uo.apps.googleusercontent.com');\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @InjectModel(User.name)\n        private userModel: Model,\n        private jwtService: JwtService\n    ) {}\n\n    /**\n     * Function used by the method \"register\" in AuthController to store new user to the database\n     * @param registerDto See the definition of the registerDto file to see the list of required propriety\n     * @returns Return a promise with the HTTP status and a message\n     */\n    async register(registerDto: RegisterDto) : Promise {\n        const { username, email, password, gender, number, birthdate, preferences } = registerDto\n        const hash = await bcrypt.hash(password, 10)\n        try {\n            await this.userModel.create({\n                username,\n                email,\n                gender,\n                role: Role.USER,\n                birthdate,\n                number,\n                password: hash,\n                preferences: preferences,\n                style : {\n                    head: \"0\",\n                    body: \"0\",\n                    pants: \"0\",\n                    shoes: \"0\",\n                },\n                unlockedStyle : {\n                    head: [\"0\"],\n                    body: [\"0\"],\n                    pants: [\"0\"],\n                    shoes: [\"0\"],\n                }\n            })\n        } catch(error) {\n            if (error.code === 11000) {\n                throw new ConflictException(\"Duplicated key\")\n            }\n        }\n        return {status: HttpStatus.CREATED, message: \"Succesfully created !\"}\n    }\n\n    /**\n     * Function used by the method \"login\" in AuthController to login an user\n     * @param loginDto See the definition of the loginDto file to see the list of required propriety\n     * @returns Return a promise with the HTTP status an AuthToken and a RefreshToken\n     */\n\n    async login(loginDto : LoginDto) : Promise {\n        const { email, password } = loginDto;\n        const user = await this.userModel.findOne({ email });\n        if (!user) {\n            throw new UnauthorizedException(\"Invalid credentials\")\n        }\n        const passwordCheck = await bcrypt.compare(password, user.password);\n        if (!passwordCheck) {\n            throw new UnauthorizedException(\"Invalid credentials\")\n        }\n        const token = this.jwtService.sign({id: user._id, role: user.role});\n        const refreshToken = this.jwtService.sign({id: user._id, role: user.role}, {expiresIn: '90d', secret:'123456'});\n        return {status: HttpStatus.ACCEPTED, token: token ,refresh: refreshToken};\n    }\n\n    /**\n     * Function user by the method \"refresh\" in AuthController to refresh AuthToken\n     * @param user User is the current user who want to refresh his token\n     * @param head actualRefresh is the refreshToken of the user\n     * @returns Return a promise with the HTTP status and a new AuthToken and the RefreshToken\n     */\n    async refresh(user : User, actualRefresh: string) : Promise{\n        return {status: HttpStatus.ACCEPTED,token: this.jwtService.sign({id: user._id}), refresh: actualRefresh}\n    }\n\n    async googleLogin(tokenId: string) : Promise {\n        console.log(tokenId);\n        const ticket = await client.verifyIdToken({\n            idToken: tokenId,\n            audience: [\n                '134575829737-ukmecg47kp10fpg20po5bo5h6k6r30uo.apps.googleusercontent.com',\n            ]\n        });\n        console.log(\"verified\")\n        const email = ticket.getPayload()?.email ?? '';\n        const username = ticket.getPayload()?.name ?? '';\n        if (!email || !username) {\n            throw new ConflictException('Email or username could not be verified');\n        }\n        let user = await this.userModel.findOne({email: email});\n        if (!user) {\n            user = await this.userModel.create({\n                email: email,\n                password: email+'asdsdsddsds',\n                style : {\n                    head: \"0\",\n                    body: \"0\",\n                    pants: \"0\",\n                    shoes: \"0\",\n                },\n                role: Role.USER,\n                unlockedStyle : {\n                    head: [\"0\"],\n                    body: [\"0\"],\n                    pants: [\"0\"],\n                    shoes: [\"0\"],\n                }\n            })\n        }\n        const token = this.jwtService.sign({id: user._id, role: user.role});\n        const refreshToken = this.jwtService.sign({id: user._id, role: user.role}, {expiresIn: '90d', secret:'123456'});\n        return {status: HttpStatus.ACCEPTED, token: token ,refresh: refreshToken};\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(uri?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.module.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uri\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { DatabaseService } from \"./database.service\";\n\n@Module({})\nexport class DatabaseModule {\n    static forRoot(uri?: string) : DynamicModule {\n        return {\n            module: DatabaseModule,\n            imports: [MongooseModule.forRootAsync({\n                useFactory: (configService: ConfigService) => ({\n                    uri: configService.get('NODE_ENV') === \"test\"\n                    ? uri\n                    : 'mongodb://mongodb:27017/unbored'\n                }),\n                inject: [ConfigService]\n            })],\n            providers: [DatabaseService],\n            exports: [DatabaseService]\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDbHandle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/database/database.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getDbHandle\n                        \n                    \n                \n            \n            \n                \ngetDbHandle()\n                \n            \n\n\n            \n                \n                    Defined in src/database/database.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Connection\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectConnection } from \"@nestjs/mongoose\";\nimport { Connection } from \"mongoose\";\n\n@Injectable()\nexport class DatabaseService {\n    constructor(@InjectConnection() private readonly connection: Connection) {}\n    getDbHandle() : Connection {\n        return this.connection\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteEventDto.html":{"url":"classes/DeleteEventDto.html","title":"class - DeleteEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/RemoveEvent.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                events\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        events\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayMinSize(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/RemoveEvent.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, ArrayMinSize } from \"class-validator\";\n\nexport class DeleteEventDto {\n    @IsArray()\n    @ArrayMinSize(1)\n    readonly events: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventController.html":{"url":"controllers/EventController.html","title":"controller - EventController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                event\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                addEvent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                addUnboredEvent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                addUnboredEventRate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteUnboredEvent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                editUnboredEvent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                listAllEvent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                removeUnboredEventRate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                showDetails\n                            \n                            \n                                    \n                                    \n                                    Async\n                                showEvent\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                uploadUnboredImages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        addEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEvent(req, addEventDto: AddEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('/add')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addEventDto\n                                    \n                                                AddEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        addUnboredEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUnboredEvent(createEventDto: createEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('/createevent')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEventDto\n                                    \n                                                createEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        addUnboredEventRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUnboredEventRate(id, rateEventDto: rateEventDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('/rateevent')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rateEventDto\n                                    \n                                                rateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEvent(req, deleteEventDto: DeleteEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Delete('/delete')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteEventDto\n                                    \n                                                DeleteEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        deleteUnboredEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUnboredEvent(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Delete('/deleteevent')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        editUnboredEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUnboredEvent(id, editEventDto: editEventDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Put('/editevent')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    editEventDto\n                                    \n                                                editEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        listAllEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllEvent()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('/lists')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        removeUnboredEventRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUnboredEventRate(req, removeEventRateDto: removeEventRateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Delete('/removerate')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    removeEventRateDto\n                                    \n                                                removeEventRateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        showDetails\n                        \n                    \n                \n            \n            \n                \n                    \n                    showDetails(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('/show')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        showEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    showEvent(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('/')\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        uploadUnboredImages\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadUnboredImages(req, id, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('/upload')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/event/event.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Post, Req, Body, Get, Delete, Query, Put, UseInterceptors, UploadedFile, FileTypeValidator, ParseFilePipe, BadRequestException } from '@nestjs/common';\nimport { JwtGuard } from '../auth/guards/jwt-auth.guard';\nimport { AddEventDto } from './dto/AddEvent.dto';\nimport { createEventDto } from './dto/CreateEvent.dto';\nimport { editEventDto } from './dto/EditEvent.dto';\nimport { rateEventDto } from './dto/RateEvent.Dto';\nimport { DeleteEventDto } from './dto/RemoveEvent.dto';\nimport { EventService } from './event.service';\nimport { HttpStatus } from '@nestjs/common';\nimport { Events } from './schemas/events.schema';\nimport { removeEventRateDto } from './dto/DeleteEventRate.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n@Controller('event')\nexport class EventController {\n    constructor(private eventService: EventService) {}\n    \n    @UseGuards(JwtGuard)\n    @Get('/')\n    async showEvent(@Req() req) : Promise{\n        return this.eventService.showEvent(req.user);\n    }\n\n    @UseGuards(JwtGuard)\n    @Get('/lists')\n    async listAllEvent() : Promise  {\n        return this.eventService.listAllEvent();\n    }\n\n    @UseGuards(JwtGuard)\n    @Post('/add')\n    async addEvent(@Req() req, @Body() addEventDto : AddEventDto) : Promise{\n        return this.eventService.addEvent(req.user.id, addEventDto);\n    }\n\n    @UseGuards(JwtGuard)\n    @Delete('/delete')\n    async deleteEvent(@Req() req, @Body() deleteEventDto : DeleteEventDto) : Promise{\n        return this.eventService.removeEvent(req.user.id, deleteEventDto);\n    }\n\n    @UseGuards(JwtGuard)\n    @Get('/show')\n    async showDetails(@Query('id') id) : Promise {\n        return this.eventService.getEventById(id);\n    }\n\n    @UseGuards(JwtGuard)\n    @Post('/createevent')\n    async addUnboredEvent(@Body() createEventDto : createEventDto) : Promise {\n        return this.eventService.createUnboredEvent(createEventDto);\n    }\n\n    @UseGuards(JwtGuard)\n    @Delete('/deleteevent')\n    async deleteUnboredEvent(@Query('id') id) : Promise  {\n        return this.eventService.deleteUnboredEvent(id);\n    }\n\n    @UseGuards(JwtGuard)\n    @Put('/editevent')\n    async editUnboredEvent(@Query('id') id, @Body() editEventDto : editEventDto) : Promise  {\n        return this.eventService.editUnboredEvent(editEventDto, id);\n    }\n\n    @UseGuards(JwtGuard)\n    @Post('/rateevent')\n    async addUnboredEventRate(@Query('id') id, @Body() rateEventDto : rateEventDto, @Req() req) : Promise  {\n        return this.eventService.addUnboredRateEvent(id, rateEventDto, req.user.id);\n    }\n\n    @UseGuards(JwtGuard)\n    @Delete('/removerate')\n    async removeUnboredEventRate(@Req() req, @Body() removeEventRateDto: removeEventRateDto) : Promise  {\n        return this.eventService.deleteUnboredRate(req.user.id, removeEventRateDto);\n    }\n\n    @UseGuards(JwtGuard)\n    @Post('/upload')\n    @UseInterceptors(FileInterceptor('file', {dest: \"./data/images\"}))\n    async uploadUnboredImages(@Req() req, @Query('id') id, @UploadedFile(\n        new ParseFilePipe({\n            validators: [\n                new FileTypeValidator({fileType: '.(png|jpg|jpeg)'})\n            ]\n        })\n    ) file: Express.Multer.File) {\n        try {\n            console.log(file)\n            return await this.eventService.uploadUnboredImage(req.user.id, id, file)\n        } catch(err) {\n            const fs = require('fs');\n            fs.unlinkSync(file.path);\n            throw new BadRequestException(\"Bad request\")\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventModule.html":{"url":"modules/EventModule.html","title":"module - EventModule","body":"\n                   \n\n\n\n\n    Modules\n    EventModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EventModule\n\n\n\ncluster_EventModule_providers\n\n\n\n\nEventService\n\nEventService\n\n\n\nEventModule\n\nEventModule\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nEventModule -->\n\nJwtStrategy->EventModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/event/event.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EventService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EventController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EventService } from './event.service';\nimport { EventController } from './event.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from '../auth/schemas/user.schema';\nimport { JwtStrategy } from '../auth/strategies/jwt.strategy';\nimport { EventSchema } from './schemas/events.schema';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: 'User', schema: UserSchema}]), MongooseModule.forFeature([{name: 'Events', schema: EventSchema}])],\n  providers: [EventService, JwtStrategy],\n  controllers: [EventController]\n})\n\nexport class EventModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventService.html":{"url":"injectables/EventService.html","title":"injectable - EventService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addEvent\n                            \n                            \n                                    Async\n                                addUnboredRateEvent\n                            \n                            \n                                    Async\n                                createUnboredEvent\n                            \n                            \n                                    Async\n                                deleteUnboredEvent\n                            \n                            \n                                    Async\n                                deleteUnboredRate\n                            \n                            \n                                    Async\n                                editUnboredEvent\n                            \n                            \n                                    Async\n                                getEventById\n                            \n                            \n                                    Async\n                                listAllEvent\n                            \n                            \n                                    Async\n                                removeEvent\n                            \n                            \n                                    Async\n                                showEvent\n                            \n                            \n                                    Async\n                                uploadUnboredImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, eventModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/event/event.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEvent(userId: string, addEvent: AddEventDto)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addEvent\n                                    \n                                                AddEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUnboredRateEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUnboredRateEvent(eventId: string, rateEventDto: rateEventDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rateEventDto\n                                    \n                                                rateEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUnboredEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUnboredEvent(createEventDto: createEventDto)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEventDto\n                                    \n                                                createEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUnboredEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUnboredEvent(eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUnboredRate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUnboredRate(userId: string, removeEventRateDto: removeEventRateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    removeEventRateDto\n                                    \n                                                removeEventRateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editUnboredEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    editUnboredEvent(editEventDto: editEventDto, eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    editEventDto\n                                    \n                                                editEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getEventById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEventById(eventId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAllEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAllEvent()\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEvent(userId: string, deleteEvent: DeleteEventDto)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    deleteEvent\n                                    \n                                                DeleteEventDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        showEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    showEvent(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadUnboredImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadUnboredImage(userId: string, eventId: string, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/event/event.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ConflictException, Injectable, InternalServerErrorException, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../auth/schemas/user.schema';\nimport { Model, Types } from 'mongoose';\nimport { AddEventDto } from './dto/AddEvent.dto';\nimport { NotFoundException } from '@nestjs/common';\nimport { DeleteEventDto } from './dto/RemoveEvent.dto';\nimport { Events } from './schemas/events.schema'\nimport { createEventDto } from './dto/CreateEvent.dto';\nimport { editEventDto } from './dto/EditEvent.dto';\nimport { rateEventDto } from './dto/RateEvent.Dto';\nimport { HttpStatus } from '@nestjs/common';\nimport { removeEventRateDto } from './dto/DeleteEventRate.dto';\n\n@Injectable()\nexport class EventService {\n    constructor(\n        @InjectModel(User.name)\n        private userModel: Model,\n        @InjectModel(Events.name)\n        private eventModel: Model,\n    ){}\n\n    async showEvent(user : User) : Promise {\n        return {status: HttpStatus.OK, reservations: user.reservations};   \n    }\n\n    async listAllEvent() : Promise  {\n        const Events = await this.eventModel.find();\n        return {status: HttpStatus.OK, events: Events};\n    }\n\n    async addEvent(userId : string, addEvent : AddEventDto) : Promise {\n        const updatedUser = await this.userModel.findByIdAndUpdate(userId, { $addToSet : { reservations: { $each: addEvent.events }}}, {new: true})\n        return {status: HttpStatus.OK, reservations: updatedUser.reservations};\n    }\n\n    async removeEvent(userId : string, deleteEvent : DeleteEventDto) : Promise {\n        const updatedUser = await this.userModel.findByIdAndUpdate(userId, { $pull : {reservations: {$in: deleteEvent.events}}}, {new: true});\n        return {status: HttpStatus.OK, reservations: updatedUser.reservations};\n    }\n\n    async getEventById(eventId: string) : Promise {\n        if (!Types.ObjectId.isValid(eventId)) {\n            throw new NotFoundException('Invalid Id');\n        }\n        const event = await this.eventModel.findById(eventId);\n        if (!event) {\n            throw new NotFoundException(\"Invalid Id\");\n        }\n        return {status: HttpStatus.OK, event: event};\n    }\n\n    async createUnboredEvent(createEventDto : createEventDto) : Promise{\n        const { name, categories, address } = createEventDto;\n        try {\n            const event = await this.eventModel.create({\n                name,\n                categories,\n                address\n            })\n            return {status: HttpStatus.CREATED, event: event};\n        } catch(error) {\n            if (error.code === 11000) {\n                throw new ConflictException(\"Duplicated Key\")\n            }\n        }\n    }\n\n    async deleteUnboredEvent(eventId : string) : Promise  {\n        if (!Types.ObjectId.isValid(eventId)) {\n            throw new NotFoundException('Invalid Id');\n        }\n        const exists = await this.eventModel.findById(eventId);\n        if (!exists) {\n            throw new NotFoundException(\"Could not find this event\");\n        }\n        await this.eventModel.deleteOne({_id: eventId});\n        return {status: HttpStatus.OK, message: \"Succefully deleted !\"}\n    }\n\n    async editUnboredEvent(editEventDto: editEventDto, eventId : string) : Promise  {\n        if (!Types.ObjectId.isValid(eventId)) {\n            throw new NotFoundException('Invalid Id');\n        }\n        const findId = await this.eventModel.findById(eventId)\n        if (!findId)\n            throw new NotFoundException('Event not existing')\n        try {\n            const event = await this.eventModel.findByIdAndUpdate(eventId, editEventDto, {new: true});\n            return {status: HttpStatus.OK, event: event};\n        } catch(error) {\n            if (error.code === 11000) {\n                throw new ConflictException(\"Duplicate Key\")\n            }\n        }\n    }\n\n    async addUnboredRateEvent(eventId : string, rateEventDto : rateEventDto, userId : string) : Promise  {\n        const newID = new Types.ObjectId();\n        if (!Types.ObjectId.isValid(eventId)) {\n            throw new NotFoundException('Invalid Id');\n        }\n        const rateEvent = {\n            stars: rateEventDto.stars,\n            comments: rateEventDto.comments,\n            id: newID\n        }\n        const rateEventForUser = {\n            idRate: newID,\n            event: eventId,\n            stars: rateEventDto.stars,\n            comments: rateEventDto.comments,\n        }\n        const updateRate = await this.eventModel.findByIdAndUpdate(eventId, { $addToSet : { rate : rateEvent}}, {new: true})\n        await this.userModel.findByIdAndUpdate(userId, { $addToSet : { rates: rateEventForUser}}, {new: true});\n        if (!updateRate) {\n            throw new NotFoundException('Event not found');\n        }\n        return {status: HttpStatus.OK, event: updateRate};\n    }\n\n    async deleteUnboredRate(userId: string, removeEventRateDto: removeEventRateDto) : Promise  {\n        const hehe1 = await this.userModel.findById(userId);\n        const cc = hehe1.rates.find(rate => rate.idRate.toString() === removeEventRateDto.rateId.toString());\n        if (!cc) {\n            throw new NotFoundException('Could not find this rate');\n        }\n        const test = new Types.ObjectId(removeEventRateDto.rateId);\n\n        const user = await this.userModel.findOneAndUpdate({_id: userId}, {$pull : {rates : {idRate : test}}}, {new: true});\n        await this.eventModel.findOneAndUpdate({_id: cc.event}, {$pull : {rate: {id: test}}});\n        return {status: HttpStatus.OK, rates: user.rates}\n    }\n\n    async uploadUnboredImage(userId: string, eventId: string, file: Express.Multer.File) : Promise {\n        const pictureForUser = {\n            id: file.filename,\n            eventId: eventId\n        }\n\n        const pictureForEvent = {\n            id: file.filename,\n            userId: userId\n        }\n        if (!Types.ObjectId.isValid(eventId))\n            throw new NotFoundException(\"Invalid Id\");\n        try {\n            await this.userModel.findOneAndUpdate({_id: userId}, {$addToSet: {pictures: pictureForUser}}, {new: true});\n            await this.eventModel.findOneAndUpdate({_id: eventId}, {$addToSet: {pictures: pictureForEvent}}, {new: true})\n            return {status: HttpStatus.OK, message: \"Image uploaded !\"};\n        } catch (err) {\n            throw new BadRequestException(\"Bad request\");\n        }\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Events.html":{"url":"classes/Events.html","title":"class - Events","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Events\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/schemas/events.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                categories\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                pictures\n                            \n                            \n                                    \n                                rate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/schemas/events.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/schemas/events.schema.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/schemas/events.schema.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pictures\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/schemas/events.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/schemas/events.schema.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'\nimport { Document } from 'mongoose'\n\n@Schema({versionKey: false})\nexport class Events extends Document {\n    @Prop({unique: [true, 'Duplicated activities entered']})\n    name: string;\n\n    @Prop()\n    address: string;\n\n    @Prop()\n    rate: {\n        id: string;\n        stars: string;\n        comments: string;\n    }[];\n\n    @Prop()\n    pictures: {\n        id: string;\n        userId: string;\n    }[];\n\n    @Prop()\n    categories: string[];\n}\n\nexport const EventSchema = SchemaFactory.createForClass(Events);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GroupController.html":{"url":"controllers/GroupController.html","title":"controller - GroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                group\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                acceptInvitation\n                            \n                            \n                                    \n                                    \n                                    Async\n                                createGroup\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteInvitation\n                            \n                            \n                                    \n                                    \n                                    Async\n                                inviteInGroup\n                            \n                            \n                                    \n                                    \n                                    Async\n                                sendMessage\n                            \n                            \n                                    \n                                    \n                                    Async\n                                showGroup\n                            \n                            \n                                    \n                                    \n                                    Async\n                                showGroupWithId\n                            \n                            \n                                    \n                                    \n                                    Async\n                                showInvitation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        acceptInvitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptInvitation(id, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('/accept')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        createGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    createGroup(req, createGroupDto: createGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('/create')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createGroupDto\n                                    \n                                                createGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        deleteInvitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteInvitation(id, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Delete('/delete')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        inviteInGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    inviteInGroup(id, userId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('/invite')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(id, req, sendMessageDto: sendMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('/message')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sendMessageDto\n                                    \n                                                sendMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        showGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    showGroup(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('/')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        showGroupWithId\n                        \n                    \n                \n            \n            \n                \n                    \n                    showGroupWithId(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('/show')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        showInvitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    showInvitation(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('/invitations')\n                \n            \n\n            \n                \n                    Defined in src/group/group.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Req, HttpStatus, Post, Body, Query, Delete } from \"@nestjs/common\";\nimport { JwtGuard } from \"src/auth/guards/jwt-auth.guard\";\nimport { createGroupDto } from \"./dto/CreateGroup.dto\";\nimport { sendMessageDto } from \"./dto/SendMessage.dto\";\nimport { GroupService } from \"./group.service\";\nimport { Groups } from \"./schemas/group.schema\";\n\n@Controller('group')\nexport class GroupController {\n    constructor(private groupService : GroupService) {}\n\n    @UseGuards(JwtGuard)\n    @Get('/')\n    async showGroup(@Req() req) : Promise {\n        return this.groupService.showGroups(req.user)\n    }\n\n    @UseGuards(JwtGuard)\n    @Get('/show')\n    async showGroupWithId(@Query('group_id') id) : Promise{\n        return this.groupService.showGroupWithId(id);\n    }\n\n    @UseGuards(JwtGuard)\n    @Get('/invitations')\n    async showInvitation(@Req() req) : Promise {\n        return this.groupService.showInvitation(req.user)\n    }\n\n    @UseGuards(JwtGuard)\n    @Post('/create')\n    async createGroup(@Req() req, @Body() createGroupDto : createGroupDto) : Promise {\n        return this.groupService.createGroup(req.user, createGroupDto)\n    }\n\n    @UseGuards(JwtGuard)\n    @Post('/invite')\n    async inviteInGroup(@Query('group_id') id, @Query('user_id') userId) : Promise {\n        return this.groupService.inviteInGroup(id, userId)\n    }\n\n    @UseGuards(JwtGuard)\n    @Post('/accept')\n    async acceptInvitation(@Query('group_id') id, @Req() req) : Promise {\n        return this.groupService.acceptInvitation(req.user, id);\n    }\n\n    @UseGuards(JwtGuard)\n    @Delete('/delete')\n    async deleteInvitation(@Query('group_id') id, @Req() req) : Promise {\n        return this.groupService.deleteInvitation(req.user, id)\n    }\n\n    @UseGuards(JwtGuard)\n    @Post('/message')\n    async sendMessage(@Query('group_id') id, @Req() req, @Body() sendMessageDto: sendMessageDto) : Promise {\n        return this.groupService.sendMessage(req.user, id, sendMessageDto);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GroupModule.html":{"url":"modules/GroupModule.html","title":"module - GroupModule","body":"\n                   \n\n\n\n\n    Modules\n    GroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_providers\n\n\n\n\nGroupService\n\nGroupService\n\n\n\nGroupModule\n\nGroupModule\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nGroupModule -->\n\nJwtStrategy->GroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/group/group.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GroupService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GroupController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from '../auth/schemas/user.schema';\nimport { JwtStrategy } from '../auth/strategies/jwt.strategy';\nimport { GroupController } from './group.controller';\nimport { GroupService } from './group.service';\nimport { GroupSchema } from './schemas/group.schema';\n\n@Module({\n    imports: [MongooseModule.forFeature([{name: 'User', schema: UserSchema}]), MongooseModule.forFeature([{name: 'Groups', schema: GroupSchema}])],\n    providers: [GroupService, JwtStrategy],\n    controllers: [GroupController]\n})\n\nexport class GroupModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GroupService.html":{"url":"injectables/GroupService.html","title":"injectable - GroupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/group.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                acceptInvitation\n                            \n                            \n                                    Async\n                                createGroup\n                            \n                            \n                                    Async\n                                deleteInvitation\n                            \n                            \n                                    Async\n                                inviteInGroup\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                            \n                                    Async\n                                showGroups\n                            \n                            \n                                    Async\n                                showGroupWithId\n                            \n                            \n                                    Async\n                                showInvitation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, groupModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/group/group.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        groupModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        acceptInvitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    acceptInvitation(user: User, groupId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    createGroup(user: User, createGroupDto: createGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createGroupDto\n                                    \n                                                createGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteInvitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteInvitation(user: User, groupId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        inviteInGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    inviteInGroup(groupId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(user: User, groupdId: string, sendMessageDto: sendMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupdId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sendMessageDto\n                                    \n                                                sendMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        showGroups\n                        \n                    \n                \n            \n            \n                \n                    \n                    showGroups(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        showGroupWithId\n                        \n                    \n                \n            \n            \n                \n                    \n                    showGroupWithId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        showInvitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    showInvitation(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { User } from \"src/auth/schemas/user.schema\";\nimport { Groups } from \"./schemas/group.schema\";\nimport { HttpStatus } from \"@nestjs/common\";\nimport { Model } from \"mongoose\"\nimport { createGroupDto } from \"./dto/CreateGroup.dto\";\nimport { sendMessageDto } from \"./dto/SendMessage.dto\";\n\n@Injectable()\nexport class GroupService {\n    constructor(\n        @InjectModel(User.name)\n        private userModel: Model,\n        @InjectModel(Groups.name)\n        private groupModel: Model,\n    ){}\n\n    async showGroups(user: User) : Promise {\n        return {status: HttpStatus.OK, groups: user.groups}\n    }\n\n    async showGroupWithId(id: string) : Promise {\n        const group = await this.groupModel.findById(id)\n        if (!group)\n            throw new NotFoundException(\"Group not found\")\n        return {status: HttpStatus.OK, groups: group};\n    }\n\n    async showInvitation(user: User) : Promise {\n        return {status: HttpStatus.OK, invitations: user.invitations}\n    }\n\n    async createGroup(user: User, createGroupDto : createGroupDto) : Promise {\n        const { name } = createGroupDto;\n        try {\n            const group = await this.groupModel.create({\n                name,\n                leader: user._id,\n            })\n            const newGroup = {\n                _id: group._id,\n                joinedAt: new Date()\n            }\n            await this.userModel.findOneAndUpdate({_id: user._id}, {$addToSet: {groups: newGroup}});\n            return {status: HttpStatus.CREATED, group: group}\n        } catch(error) {\n            if (error.code === 11000) {\n                throw new ConflictException(\"Duplicated Key\")\n            }\n        }\n    }\n\n    async inviteInGroup(groupId: string, userId: string) : Promise {\n        const group = await this.groupModel.findById(groupId);\n        const user = await this.userModel.findById(userId)\n        if (!group)\n            throw new NotFoundException(\"Group not found\")\n        if (!user) {\n            throw new NotFoundException(\"could not find this user\")\n        }\n        const exists = user.invitations.some((invitations) => invitations._id === groupId)\n        const newInvitations = {\n            _id: groupId,\n            createdAt: new Date()\n        }\n        if (exists) {\n            return {status: HttpStatus.CONFLICT, message: \"user already got an invitation !\"}\n        } else if (group.members.includes(userId) === true) {\n            return {status: HttpStatus.CONFLICT, message: \"user already in this group !\"}\n        } else {\n            await this.userModel.findOneAndUpdate({_id: userId}, {$addToSet: {invitations: newInvitations}});\n            return {status: HttpStatus.OK, message: \"invitation successfully sended !\"}\n        }\n    }\n\n    async acceptInvitation(user: User, groupId: string) : Promise {\n        const exists = user.invitations.some((invitations) => invitations._id === groupId)\n        if (!exists) {\n            return {status: HttpStatus.NOT_ACCEPTABLE, message: \"user did not had an invitation from this group\"};\n        } else {\n            const newGroup = {\n                _id: groupId,\n                joinedAt: new Date()\n            }\n            await this.groupModel.findByIdAndUpdate(groupId, {$addToSet: {members: user._id}});\n            await this.userModel.findByIdAndUpdate(user._id, {$addToSet: { groups: newGroup }});\n            await this.userModel.findByIdAndUpdate(user._id, {$pull: {invitations: {_id: groupId}}}, {new: true});\n            const hehe = await this.userModel.findOne({_id: user.id});\n            return {status: HttpStatus.OK, message: \"Successfully joined group !\"}\n        }\n    }\n\n    async deleteInvitation(user: User, groupId: string) : Promise  {\n        const exists = user.invitations.some((invitations) => invitations._id === groupId)\n        if (!exists)\n            return {status: HttpStatus.NOT_ACCEPTABLE, message: \"user did not had an invitation from this group\"};\n        else {\n            await this.userModel.findByIdAndUpdate(user._id, {$pull: {invitations: {_id:  groupId}}});\n            return {status: HttpStatus.OK, message: \"successsfully rejected invitation !\"}\n        }\n    }\n\n    async sendMessage(user: User, groupdId: string, sendMessageDto: sendMessageDto) : Promise {\n        const {message} = sendMessageDto;\n        const group = await this.groupModel.findById(groupdId)\n        if (!group)\n            throw new NotFoundException(\"Group not found !\")\n        const exists = user.groups.some((groups) => groups._id === groupdId);\n        if (!exists)\n            throw new ConflictException(\"You are not able to send a message to this group !\")\n        const newMessage = {\n            message: message,\n            _id: user.id,\n            sendAt: new Date\n        }\n        await this.groupModel.findByIdAndUpdate(groupdId, {$addToSet: {messages: newMessage}});\n        return {status: HttpStatus.OK, message: message + \" has been posted !\"};\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Groups.html":{"url":"classes/Groups.html","title":"class - Groups","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Groups\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/schemas/group.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                leader\n                            \n                            \n                                    \n                                members\n                            \n                            \n                                    \n                                messages\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        leader\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/schemas/group.schema.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'\nimport { Document } from 'mongoose'\n\n@Schema({versionKey: false})\nexport class Groups extends Document {\n    @Prop({unique: [true, 'Duplicated name entered']})\n    name: string;\n\n    @Prop()\n    leader: string;\n\n    @Prop()\n    members: string[];\n\n    @Prop()\n    messages: {\n        message: string;\n        sendAt: Date;\n        _id: string;\n    }[]\n}\n\nexport const GroupSchema = SchemaFactory.createForClass(Groups)\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Strategy, ExtractJwt } from 'passport-jwt'\nimport { User } from '../schemas/user.schema'\nimport { Model } from 'mongoose'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n    constructor (\n        @InjectModel(User.name)\n        private userModel: Model,\n    ) {\n        super ({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: '123456',\n        });\n    }\n\n    async validate(payload : any) {\n        const { id } = payload;\n        const user = await this.userModel.findById(id).select(\"-password\").select(\"-__v\");\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail({}, {message: 'Please enter a correct email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsEmail } from \"class-validator\";\n\nexport class LoginDto {\n    @IsNotEmpty()\n    @IsEmail({}, { message: \"Please enter a correct email\"})\n    readonly email: string;\n\n    @IsNotEmpty()\n    @IsString()\n    readonly password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                avatar\n                            \n                            \n                                    \n                                    \n                                    Async\n                                avatars\n                            \n                            \n                                    \n                                    \n                                    Async\n                                changeAvatar\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getprofilebyid\n                            \n                            \n                                    \n                                    \n                                    Async\n                                profile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        avatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    avatar(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('/avatar')\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        avatars\n                        \n                    \n                \n            \n            \n                \n                    \n                    avatars(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('/avatars')\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        changeAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeAvatar(req, updateAvatarDto: UpdateAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('/avatar')\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAvatarDto\n                                    \n                                                UpdateAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        getprofilebyid\n                        \n                    \n                \n            \n            \n                \n                    \n                    getprofilebyid(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Post('/')\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Get('/')\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req, updateUser: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtGuard)@Put('/update')\n                \n            \n\n            \n                \n                    Defined in src/profile/profile.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUser\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Req, Put, Body, Post, Query } from '@nestjs/common';\nimport { JwtGuard } from '../auth/guards/jwt-auth.guard';\nimport { UpdateDto } from './dto/update.dto';\nimport { UpdateAvatarDto } from './dto/updateAvatar.dto';\nimport { ProfileService } from './profile.service';\nimport { User } from 'src/auth/schemas/user.schema';\nimport { HttpStatus } from '@nestjs/common';\n\n@Controller('profile')\nexport class ProfileController {\n\n    constructor(private profileService: ProfileService) {}\n\n    @UseGuards(JwtGuard)\n    @Get('/')\n    async profile(@Req() req) : Promise  {\n        return this.profileService.profile(req.user);\n    }\n\n    @UseGuards(JwtGuard)\n    @Post('/')\n    async getprofilebyid(@Query('id') id) : Promise  {\n        return this.profileService.getprofilebyid(id);\n    }\n\n    @UseGuards(JwtGuard)\n    @Put('/update')\n    async update(@Req() req, @Body() updateUser : UpdateDto) : Promise {\n        return this.profileService.UpdateUser(req.user.id, updateUser);\n    }\n\n    @UseGuards(JwtGuard)\n    @Get('/avatar')\n    async avatar(@Req() req) : Promise {\n        return this.profileService.UserActualAvatar(req.user);\n    }\n\n    @UseGuards(JwtGuard)\n    @Get('/avatars')\n    async avatars(@Req() req) : Promise {\n        return this.profileService.UserAvatars(req.user);\n    }\n\n    @UseGuards(JwtGuard)\n    @Post('/avatar')\n    async changeAvatar(@Req() req, @Body() updateAvatarDto : UpdateAvatarDto) : Promise {\n        return this.profileService.ChangeAvatar(req.user.id, updateAvatarDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nJwtStrategy->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from '../auth/schemas/user.schema';\nimport { JwtStrategy } from '../auth/strategies/jwt.strategy';\nimport { ProfileController } from './profile.controller';\nimport { ProfileService } from './profile.service';\n\n@Module({\n    imports:[MongooseModule.forFeature([{ name : 'User', schema: UserSchema}])],\n    controllers: [ProfileController],\n    providers: [ProfileService, JwtStrategy],\n})\n\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ChangeAvatar\n                            \n                            \n                                    Async\n                                getprofilebyid\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                UpdateUser\n                            \n                            \n                                    Async\n                                UserActualAvatar\n                            \n                            \n                                    Async\n                                UserAvatars\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/profile/profile.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ChangeAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    ChangeAvatar(id: string, updateAvatarDto: UpdateAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAvatarDto\n                                    \n                                                UpdateAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getprofilebyid\n                        \n                    \n                \n            \n            \n                \n                    \n                    getprofilebyid(profilId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profilId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        UpdateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    UpdateUser(id: string, updateUser: UpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUser\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        UserActualAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    UserActualAvatar(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        UserAvatars\n                        \n                    \n                \n            \n            \n                \n                    \n                    UserAvatars(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/profile/profile.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, HttpCode, Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Model } from \"mongoose\";\nimport { User } from \"../auth/schemas/user.schema\";\nimport { UpdateDto } from './dto/update.dto';\nimport { UpdateAvatarDto } from './dto/updateAvatar.dto';\nimport { Types } from 'mongoose';\nimport { HttpStatus } from '@nestjs/common';\n\n@Injectable()\nexport class ProfileService {\n    constructor(\n        @InjectModel(User.name)\n        private userModel: Model,\n    ){}\n    async profile(user : User) : Promise {\n        return {status: HttpStatus.OK, user: user as User};\n    }\n\n    async getprofilebyid(profilId: string) : Promise {\n        if (!Types.ObjectId.isValid(profilId))\n            throw new NotFoundException('Invalid Id');\n        const getUser = await this.userModel.findById(profilId).select('-password').select('-__v');\n        return {status: HttpStatus.OK, user : getUser as User};\n    }\n\n    async UpdateUser(id: string, updateUser : UpdateDto) : Promise {\n        if (updateUser.role) {\n            throw new UnauthorizedException('Role is cannot be modified')\n        }\n        try {\n            let updatedUser = await this.userModel.findByIdAndUpdate(id, updateUser, {new: true}).select('-password').select('-__v');\n            return {status: HttpStatus.OK, user: updatedUser as User};\n        } catch(error) {\n            if (error.code === 11000) {\n                throw new ConflictException('Already used key');\n            }\n        }\n    }\n\n    async UserActualAvatar(user : User) : Promise {\n        return {status: HttpStatus.OK, style: user.style as Object} ;\n    }\n\n    async UserAvatars(user : User) : Promise{\n        return {status: HttpStatus.OK, unlockedStyles: user.unlockedStyle}\n    }\n\n    async ChangeAvatar(id: string, updateAvatarDto : UpdateAvatarDto) : Promise {\n        const avatarUpdate = await this.userModel.findByIdAndUpdate(id, { $set : updateAvatarDto }, {new: true});\n        return {status: HttpStatus.OK,style: avatarUpdate.style as Object};\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshGuard.html":{"url":"injectables/RefreshGuard.html","title":"injectable - RefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/refresh-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class RefreshGuard extends AuthGuard('refresh') {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshStrategy.html":{"url":"injectables/RefreshStrategy.html","title":"injectable - RefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/refresh.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/refresh.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/refresh.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Strategy, ExtractJwt } from 'passport-jwt'\nimport { User } from '../schemas/user.schema'\nimport { Model } from 'mongoose'\n\n@Injectable()\nexport class RefreshStrategy extends PassportStrategy(Strategy, 'refresh') {\n    constructor (\n        @InjectModel(User.name)\n        private userModel: Model,\n    ) {\n        super ({\n            jwtFromRequest: ExtractJwt.fromHeader(\"refresh\"),\n            ignoreExpiration: false,\n            secretOrKey: '123456',\n        });\n    }\n\n    async validate(payload : any) {\n        const { id } = payload;\n        const user = await this.userModel.findById(id).select(\"-password\").select(\"-__v\");\n        return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                birthdate\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                gender\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                number\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                preferences\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail({}, {message: 'Please enter a correct email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(Gender, {message: 'Please enter a correct gender'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        preferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsString, IsEmail, IsArray, IsDateString, IsOptional } from \"class-validator\";\nimport { Gender } from \"../schemas/user.schema\";\n\nexport class RegisterDto {\n    @IsNotEmpty()\n    @IsString()\n    readonly username: string;\n\n    @IsNotEmpty()\n    @IsEmail({}, { message: \"Please enter a correct email\"})\n    readonly email: string;\n\n    @IsNotEmpty()\n    @IsEnum(Gender, { message : \"Please enter a correct gender\"})\n    readonly gender: Gender;\n\n    @IsNotEmpty()\n    @IsString()\n    readonly number: string;\n\n    @IsNotEmpty()\n    @IsString()\n    readonly password: string;\n\n    @IsNotEmpty()\n    @IsDateString()\n    readonly birthdate: string;\n\n    @IsOptional()\n    @IsArray()\n    readonly preferences: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAvatarDto.html":{"url":"classes/UpdateAvatarDto.html","title":"class - UpdateAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/dto/updateAvatar.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                style\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        style\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/updateAvatar.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsEmail, IsDateString, IsOptional } from \"class-validator\";\n\nexport class UpdateAvatarDto {\n\n    style: {\n        readonly head: string;\n        readonly body: string;\n        readonly pants: string;\n        readonly shoes: string;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto.html":{"url":"classes/UpdateDto.html","title":"class - UpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/dto/update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                birthdate\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                gender\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                number\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                role\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/update.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail({}, {message: 'Please enter a correct email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/update.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(Gender, {message: 'Please enter a correct gender'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/update.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/update.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/update.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/update.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/update.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsString, IsEmail, IsDateString, IsOptional } from \"class-validator\";\nimport { Gender } from \"../../auth/schemas/user.schema\";\n\nexport class UpdateDto {\n    @IsOptional()\n    @IsString()\n    readonly username: string;\n\n    @IsOptional()\n    @IsEmail({}, { message: \"Please enter a correct email\"})\n    readonly email: string;\n\n    @IsOptional()\n    readonly role: string;\n\n    @IsOptional()\n    @IsEnum(Gender, { message : \"Please enter a correct gender\"})\n    readonly gender: Gender;\n\n    @IsOptional()\n    @IsString()\n    readonly number: string;\n\n    @IsOptional()\n    @IsString()\n    readonly password: string;\n\n    @IsOptional()\n    @IsDateString()\n    readonly birthdate: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/schemas/user.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                birthdate\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                gender\n                            \n                            \n                                    \n                                groups\n                            \n                            \n                                    \n                                invitations\n                            \n                            \n                                    \n                                number\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                pictures\n                            \n                            \n                                    \n                                preferences\n                            \n                            \n                                    \n                                rates\n                            \n                            \n                                    \n                                reservations\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                style\n                            \n                            \n                                    \n                                unlockedStyle\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        groups\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        invitations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        pictures\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        preferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        rates\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        style\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        unlockedStyle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Object})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/schemas/user.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'\nimport { Document } from 'mongoose';\n\nexport enum Gender {\n    HOMME = \"Homme\",\n    FEMME = \"Femme\",\n    AUTRE = \"Autre\",\n}\n\nexport enum Role {\n    USER = \"User\",\n    EVENTADDER = \"EventAdder\",\n}\n\n@Schema({versionKey: false})\nexport class User extends Document {\n\n    @Prop({unique: [ true, 'Duplicated username entered']})\n    username: string;\n\n    @Prop({unique: [ true, 'Duplicated email entered']})\n    email: string;\n\n    @Prop()\n    password: string;\n\n    @Prop()\n    role: string;\n\n    @Prop({unique: [true, 'number already used']})\n    number: string;\n\n    @Prop()\n    gender: Gender;\n\n    @Prop()\n    birthdate: Date;\n\n    @Prop()\n    preferences: string[];\n\n    @Prop()\n    reservations: string[];\n\n    @Prop({type: Object})\n    style: {\n        head: string,\n        body: string,\n        pants: string,\n        shoes: string,\n    };\n\n    @Prop({type: Object})\n    unlockedStyle: {\n        head: string[]\n        body: string[]\n        pants: string[]\n        shoes: string[]\n    }\n\n    @Prop()\n    rates: {\n        event: string;\n        idRate: string;\n        comment: string;\n        stars: string;\n    }[];\n\n    @Prop()\n    pictures: {\n        id: string;\n        eventId: string;\n    }[];\n\n    @Prop()\n    groups: {\n        _id: string\n        joinedAt: Date,\n    }[];\n\n    @Prop()\n    invitations: {\n        _id: string,\n        createdAt: Date,\n    }[];\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n// UserSchema.index({'invitations.createdAt': 1}, {expireAfterSeconds: 60});\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            variable\n            client\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/refresh-auth.guard.ts\n            \n            injectable\n            RefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/auth/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/refresh.strategy.ts\n            \n            injectable\n            RefreshStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/event/dto/AddEvent.dto.ts\n            \n            class\n            AddEventDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/event/dto/CreateEvent.dto.ts\n            \n            class\n            createEventDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/event/dto/DeleteEventRate.dto.ts\n            \n            class\n            removeEventRateDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/event/dto/EditEvent.dto.ts\n            \n            class\n            editEventDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/event/dto/RateEvent.Dto.ts\n            \n            class\n            rateEventDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/event/dto/RemoveEvent.dto.ts\n            \n            class\n            DeleteEventDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/event/event.controller.ts\n            \n            controller\n            EventController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/event/event.service.ts\n            \n            injectable\n            EventService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/event/schemas/events.schema.ts\n            \n            class\n            Events\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/event/schemas/events.schema.ts\n            \n            variable\n            EventSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/group/dto/CreateGroup.dto.ts\n            \n            class\n            createGroupDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/group/dto/SendMessage.dto.ts\n            \n            class\n            sendMessageDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/group/group.controller.ts\n            \n            controller\n            GroupController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/group/group.service.ts\n            \n            injectable\n            GroupService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/group/schemas/group.schema.ts\n            \n            class\n            Groups\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/group/schemas/group.schema.ts\n            \n            variable\n            GroupSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profile/dto/update.dto.ts\n            \n            class\n            UpdateDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/profile/dto/updateAvatar.dto.ts\n            \n            class\n            UpdateAvatarDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createEventDto.html":{"url":"classes/createEventDto.html","title":"class - createEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/CreateEvent.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                address\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                categories\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/CreateEvent.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ArrayMinSize(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/CreateEvent.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/CreateEvent.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsString, IsEmail, IsArray, IsDateString, ArrayMinSize } from \"class-validator\";\n\nexport class createEventDto {\n    @IsNotEmpty()\n    @IsString()\n    readonly name: string;\n\n    @IsNotEmpty()\n    @IsString()\n    readonly address: string;\n\n    @IsArray()\n    @ArrayMinSize(1)\n    readonly categories: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createGroupDto.html":{"url":"classes/createGroupDto.html","title":"class - createGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/dto/CreateGroup.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/dto/CreateGroup.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class createGroupDto {\n    @IsNotEmpty()\n    @IsString()\n    readonly name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/mongoose : ^9.2.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @types/multer : ^1.4.7\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            express : ^4.18.2\n        \n            google-auth-library : ^9.0.0\n        \n            mongoose : ^7.1.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/editEventDto.html":{"url":"classes/editEventDto.html","title":"class - editEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  editEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/EditEvent.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                categories\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/EditEvent.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ArrayMinSize(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/EditEvent.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/EditEvent.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsString, IsEmail, IsArray, IsDateString, ArrayMinSize, IsOptional } from \"class-validator\";\n\nexport class editEventDto {\n    @IsOptional()\n    @IsNotEmpty()\n    @IsString()\n    readonly name: string;\n\n    @IsOptional()\n    @IsNotEmpty()\n    @IsString()\n    readonly address: string;\n\n    @IsOptional()\n    @IsArray()\n    @ArrayMinSize(1)\n    readonly categories: string[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Gender   (src/.../user.schema.ts)\n                        \n                        \n                            Role   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/schemas/user.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        Gender\n                    \n                \n                        \n                            \n                                 HOMME\n                            \n                        \n                        \n                            \n                                Value : Homme\n                            \n                        \n                        \n                            \n                                 FEMME\n                            \n                        \n                        \n                            \n                                Value : Femme\n                            \n                        \n                        \n                            \n                                 AUTRE\n                            \n                        \n                        \n                            \n                                Value : Autre\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : User\n                            \n                        \n                        \n                            \n                                 EVENTADDER\n                            \n                        \n                        \n                            \n                                Value : EventAdder\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\n\n# doccumentation\n$ npm run start:docTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EventModule\n\n\n\ncluster_EventModule_providers\n\n\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_providers\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEventModule\n\nEventModule\n\nAppModule -->\n\nEventModule->AppModule\n\n\n\n\n\nGroupModule\n\nGroupModule\n\nAppModule -->\n\nGroupModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\nEventModule -->\n\nJwtStrategy->EventModule\n\n\n\nGroupModule -->\n\nJwtStrategy->GroupModule\n\n\n\nProfileModule -->\n\nJwtStrategy->ProfileModule\n\n\n\n\n\nRefreshStrategy\n\nRefreshStrategy\n\nAuthModule -->\n\nRefreshStrategy->AuthModule\n\n\n\n\n\nEventService\n\nEventService\n\nEventModule -->\n\nEventService->EventModule\n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/rateEventDto.html":{"url":"classes/rateEventDto.html","title":"class - rateEventDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  rateEventDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/RateEvent.Dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                comments\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                stars\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/RateEvent.Dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        stars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/RateEvent.Dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNotEmpty, IsString, IsEmail, IsArray, IsDateString, ArrayMinSize, IsOptional } from \"class-validator\";\n\nexport class rateEventDto {\n    @IsNotEmpty()\n    @IsString()\n    readonly stars: string;\n\n    @IsNotEmpty()\n    @IsString()\n    @IsOptional()\n    readonly comments: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/removeEventRateDto.html":{"url":"classes/removeEventRateDto.html","title":"class - removeEventRateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  removeEventRateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/dto/DeleteEventRate.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                rateId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        rateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/event/dto/DeleteEventRate.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, ArrayMinSize, IsString, IsNotEmpty } from \"class-validator\";\n\nexport class removeEventRateDto {\n    @IsString()\n    @IsNotEmpty()\n    readonly rateId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/sendMessageDto.html":{"url":"classes/sendMessageDto.html","title":"class - sendMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  sendMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/dto/SendMessage.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group/dto/SendMessage.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class sendMessageDto {\n    @IsNotEmpty()\n    @IsString()\n    readonly message: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            client   (src/.../auth.service.ts)\n                        \n                        \n                            EventSchema   (src/.../events.schema.ts)\n                        \n                        \n                            GroupSchema   (src/.../group.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new OAuth2Client('134575829737-ukmecg47kp10fpg20po5bo5h6k6r30uo.apps.googleusercontent.com')\n                    \n                \n\n\n        \n    \n\n    src/event/schemas/events.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EventSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Events)\n                    \n                \n\n\n        \n    \n\n    src/group/schemas/group.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GroupSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Groups)\n                    \n                \n\n\n        \n    \n\n    src/auth/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
